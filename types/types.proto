syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// Blockchain Types 

message BlockHeader {
    string chain_id = 1 [(gogoproto.customname)="ChainID"];
    int64 height = 2;
    int64 time = 3;
    int32 num_txs = 4;
    BlockID last_block_id = 5 [(gogoproto.customname)="LastBlockID", (gogoproto.nullable)=false];
    bytes last_commit_hash = 6;
    bytes data_hash = 7;
    bytes validators_hash = 8;
    bytes app_hash = 9;
}

message BlockID {
    bytes hash = 1;
    PartSetHeader parts = 2 [(gogoproto.nullable)=false];
}

message PartSetHeader {
    int32 total = 1;
    bytes hash = 2;
}

message Validator {
    bytes pub_key = 1;
    int64 power = 2;
}

message Evidence {
    bytes pub_key = 1;
    int64 height = 2;
}

// Generic Loom data structures

message Address {
    string chain_id = 1;
    bytes local = 2 [(gogoproto.customtype) = "github.com/loomnetwork/go-loom/common.LocalAddress", (gogoproto.nullable) = false];
}

message Transaction {
    uint32 id = 1;
    bytes data = 2;
}

// Contract specific data structures

enum EncodingType {
    JSON = 0;
    PROTOBUF3 = 1;
}

message PluginCode {
    string name = 1;
    bytes input = 2;
}

message Request {
    EncodingType content_type = 1;
    EncodingType accept = 2;
    bytes body = 3;
}

message Response {
    EncodingType content_type = 1;
    bytes body = 2;
}

message Message {
    Address sender = 1;
}

message ContractMeta {
    string name = 1;
    string version = 2;
}

message ContractMethodCall {
	string method = 1;
	bytes args = 2;
}

// Wrapped types for GRPC

message Context {
}

message MetaRequest {
}

message ContractCallRequest {
    BlockHeader block = 1;
    Message message = 2;
    Address contract_address = 3;
    uint32 api_server = 4;
    Request request = 5;
}

message InitResponse {

}

service Contract {
    rpc Meta(MetaRequest) returns (ContractMeta);
    rpc Init(ContractCallRequest) returns (InitResponse);
    rpc Call(ContractCallRequest) returns (Response);
    rpc StaticCall(ContractCallRequest) returns (Response);
}

message GetRequest {
    bytes key = 1;
}

message GetResponse {
    bytes value = 1;
}

message HasRequest {
    bytes key = 1;
}

message HasResponse {
    bool value = 1;
}

message CallRequest {
    Address address = 1;
    bytes input = 2;
}

message CallResponse {
    bytes output = 1;
}

message EmitRequest {
    bytes data = 1;
}

message EmitResponse {
}

message SetRequest {
    bytes key = 1;
    bytes value = 2;
}

message SetResponse {
}

message DeleteRequest {
    bytes key = 1;
}

message DeleteResponse {
}

service API {
    rpc Get(GetRequest) returns (GetResponse);
    rpc Has(HasRequest) returns (HasResponse);
    rpc StaticCall(CallRequest) returns (CallResponse);
    rpc Emit(EmitRequest) returns (EmitResponse);

    rpc Set(SetRequest) returns (SetResponse);
    rpc Delete(DeleteRequest) returns (DeleteResponse);
    rpc Call(CallRequest) returns (CallResponse);
}
