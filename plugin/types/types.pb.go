// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/loomnetwork/go-loom/plugin/types/types.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	github.com/loomnetwork/go-loom/plugin/types/types.proto

It has these top-level messages:
	PluginCode
	Request
	Response
	Message
	ContractMeta
	ContractMethodCall
	Context
	MetaRequest
	ContractCallRequest
	InitResponse
	EthMessage
	EventDataList
	EventData
	EvmTxReceiptList
	EvmTxReceiptListItem
	EvmTxReceipt
	EvmTxObject
	EthFilterLog
	EthBlockInfo
	EthBlockHashList
	EthTxHashList
	EthFilterLogList
	EthFilterEnvelope
	GetRequest
	GetResponse
	EvmTxReceiptRequest
	RangeRequest
	RangeEntry
	RangeResponse
	HasRequest
	HasResponse
	ValidatorPowerRequest
	ValidatorPowerResponse
	CallRequest
	CallResponse
	SetValidatorPowerRequest
	SetValidatorPowerResponse
	ResolveRequest
	ResolveResponse
	EmitRequest
	EmitResponse
	SetRequest
	SetResponse
	DeleteRequest
	DeleteResponse
	ContractRecordRequest
	ContractRecordResponse
*/
package types

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import types1 "github.com/loomnetwork/go-loom/types"
import vm "github.com/loomnetwork/go-loom/vm"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type EncodingType int32

const (
	EncodingType_JSON      EncodingType = 0
	EncodingType_PROTOBUF3 EncodingType = 1
)

var EncodingType_name = map[int32]string{
	0: "JSON",
	1: "PROTOBUF3",
}
var EncodingType_value = map[string]int32{
	"JSON":      0,
	"PROTOBUF3": 1,
}

func (x EncodingType) String() string {
	return proto.EnumName(EncodingType_name, int32(x))
}
func (EncodingType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

type PluginCode struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Input []byte `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
}

func (m *PluginCode) Reset()                    { *m = PluginCode{} }
func (m *PluginCode) String() string            { return proto.CompactTextString(m) }
func (*PluginCode) ProtoMessage()               {}
func (*PluginCode) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *PluginCode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PluginCode) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

type Request struct {
	ContentType EncodingType `protobuf:"varint,1,opt,name=content_type,json=contentType,proto3,enum=EncodingType" json:"content_type,omitempty"`
	Accept      EncodingType `protobuf:"varint,2,opt,name=accept,proto3,enum=EncodingType" json:"accept,omitempty"`
	Body        []byte       `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *Request) GetContentType() EncodingType {
	if m != nil {
		return m.ContentType
	}
	return EncodingType_JSON
}

func (m *Request) GetAccept() EncodingType {
	if m != nil {
		return m.Accept
	}
	return EncodingType_JSON
}

func (m *Request) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type Response struct {
	ContentType EncodingType `protobuf:"varint,1,opt,name=content_type,json=contentType,proto3,enum=EncodingType" json:"content_type,omitempty"`
	Body        []byte       `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *Response) GetContentType() EncodingType {
	if m != nil {
		return m.ContentType
	}
	return EncodingType_JSON
}

func (m *Response) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type Message struct {
	Sender *types1.Address `protobuf:"bytes,1,opt,name=sender" json:"sender,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *Message) GetSender() *types1.Address {
	if m != nil {
		return m.Sender
	}
	return nil
}

type ContractMeta struct {
	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version    string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	MetricAddr string `protobuf:"bytes,3,opt,name=metric_addr,json=metricAddr,proto3" json:"metric_addr,omitempty"`
}

func (m *ContractMeta) Reset()                    { *m = ContractMeta{} }
func (m *ContractMeta) String() string            { return proto.CompactTextString(m) }
func (*ContractMeta) ProtoMessage()               {}
func (*ContractMeta) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *ContractMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContractMeta) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ContractMeta) GetMetricAddr() string {
	if m != nil {
		return m.MetricAddr
	}
	return ""
}

type ContractMethodCall struct {
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Args   []byte `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
}

func (m *ContractMethodCall) Reset()                    { *m = ContractMethodCall{} }
func (m *ContractMethodCall) String() string            { return proto.CompactTextString(m) }
func (*ContractMethodCall) ProtoMessage()               {}
func (*ContractMethodCall) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

func (m *ContractMethodCall) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *ContractMethodCall) GetArgs() []byte {
	if m != nil {
		return m.Args
	}
	return nil
}

type Context struct {
}

func (m *Context) Reset()                    { *m = Context{} }
func (m *Context) String() string            { return proto.CompactTextString(m) }
func (*Context) ProtoMessage()               {}
func (*Context) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

type MetaRequest struct {
}

func (m *MetaRequest) Reset()                    { *m = MetaRequest{} }
func (m *MetaRequest) String() string            { return proto.CompactTextString(m) }
func (*MetaRequest) ProtoMessage()               {}
func (*MetaRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

type ContractCallRequest struct {
	Block           *types1.BlockHeader `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	Message         *Message            `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	ContractAddress *types1.Address     `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress" json:"contract_address,omitempty"`
	ApiServer       uint32              `protobuf:"varint,4,opt,name=api_server,json=apiServer,proto3" json:"api_server,omitempty"`
	Request         *Request            `protobuf:"bytes,5,opt,name=request" json:"request,omitempty"`
}

func (m *ContractCallRequest) Reset()                    { *m = ContractCallRequest{} }
func (m *ContractCallRequest) String() string            { return proto.CompactTextString(m) }
func (*ContractCallRequest) ProtoMessage()               {}
func (*ContractCallRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{8} }

func (m *ContractCallRequest) GetBlock() *types1.BlockHeader {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *ContractCallRequest) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *ContractCallRequest) GetContractAddress() *types1.Address {
	if m != nil {
		return m.ContractAddress
	}
	return nil
}

func (m *ContractCallRequest) GetApiServer() uint32 {
	if m != nil {
		return m.ApiServer
	}
	return 0
}

func (m *ContractCallRequest) GetRequest() *Request {
	if m != nil {
		return m.Request
	}
	return nil
}

type InitResponse struct {
}

func (m *InitResponse) Reset()                    { *m = InitResponse{} }
func (m *InitResponse) String() string            { return proto.CompactTextString(m) }
func (*InitResponse) ProtoMessage()               {}
func (*InitResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{9} }

type EthMessage struct {
	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *EthMessage) Reset()                    { *m = EthMessage{} }
func (m *EthMessage) String() string            { return proto.CompactTextString(m) }
func (*EthMessage) ProtoMessage()               {}
func (*EthMessage) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{10} }

func (m *EthMessage) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *EthMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type EventDataList struct {
	Events []*EventData `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
}

func (m *EventDataList) Reset()                    { *m = EventDataList{} }
func (m *EventDataList) String() string            { return proto.CompactTextString(m) }
func (*EventDataList) ProtoMessage()               {}
func (*EventDataList) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{11} }

func (m *EventDataList) GetEvents() []*EventData {
	if m != nil {
		return m.Events
	}
	return nil
}

type EventData struct {
	Topics           []string        `protobuf:"bytes,1,rep,name=topics" json:"topics,omitempty"`
	Caller           *types1.Address `protobuf:"bytes,2,opt,name=caller" json:"caller,omitempty"`
	Address          *types1.Address `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
	PluginName       string          `protobuf:"bytes,4,opt,name=plugin_name,json=pluginName,proto3" json:"plugin_name,omitempty"`
	BlockHeight      uint64          `protobuf:"varint,5,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	EncodedBody      []byte          `protobuf:"bytes,6,opt,name=encoded_body,json=encodedBody,proto3" json:"encoded_body,omitempty"`
	OriginalRequest  []byte          `protobuf:"bytes,7,opt,name=original_request,json=originalRequest,proto3" json:"original_request,omitempty"`
	TxHash           []byte          `protobuf:"bytes,8,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	TransactionIndex uint64          `protobuf:"varint,9,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`
}

func (m *EventData) Reset()                    { *m = EventData{} }
func (m *EventData) String() string            { return proto.CompactTextString(m) }
func (*EventData) ProtoMessage()               {}
func (*EventData) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{12} }

func (m *EventData) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *EventData) GetCaller() *types1.Address {
	if m != nil {
		return m.Caller
	}
	return nil
}

func (m *EventData) GetAddress() *types1.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *EventData) GetPluginName() string {
	if m != nil {
		return m.PluginName
	}
	return ""
}

func (m *EventData) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *EventData) GetEncodedBody() []byte {
	if m != nil {
		return m.EncodedBody
	}
	return nil
}

func (m *EventData) GetOriginalRequest() []byte {
	if m != nil {
		return m.OriginalRequest
	}
	return nil
}

func (m *EventData) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *EventData) GetTransactionIndex() uint64 {
	if m != nil {
		return m.TransactionIndex
	}
	return 0
}

type EvmTxReceiptList struct {
	TxReceipts []*EvmTxReceipt `protobuf:"bytes,1,rep,name=tx_receipts,json=txReceipts" json:"tx_receipts,omitempty"`
}

func (m *EvmTxReceiptList) Reset()                    { *m = EvmTxReceiptList{} }
func (m *EvmTxReceiptList) String() string            { return proto.CompactTextString(m) }
func (*EvmTxReceiptList) ProtoMessage()               {}
func (*EvmTxReceiptList) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{13} }

func (m *EvmTxReceiptList) GetTxReceipts() []*EvmTxReceipt {
	if m != nil {
		return m.TxReceipts
	}
	return nil
}

type EvmTxReceiptListItem struct {
	Receipt    *EvmTxReceipt `protobuf:"bytes,1,opt,name=receipt" json:"receipt,omitempty"`
	NextTxHash []byte        `protobuf:"bytes,2,opt,name=nextTxHash,proto3" json:"nextTxHash,omitempty"`
}

func (m *EvmTxReceiptListItem) Reset()                    { *m = EvmTxReceiptListItem{} }
func (m *EvmTxReceiptListItem) String() string            { return proto.CompactTextString(m) }
func (*EvmTxReceiptListItem) ProtoMessage()               {}
func (*EvmTxReceiptListItem) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{14} }

func (m *EvmTxReceiptListItem) GetReceipt() *EvmTxReceipt {
	if m != nil {
		return m.Receipt
	}
	return nil
}

func (m *EvmTxReceiptListItem) GetNextTxHash() []byte {
	if m != nil {
		return m.NextTxHash
	}
	return nil
}

type EvmTxReceipt struct {
	TransactionIndex  int32           `protobuf:"varint,1,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`
	BlockHash         []byte          `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber       int64           `protobuf:"varint,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	CumulativeGasUsed int32           `protobuf:"varint,4,opt,name=cumulative_gas_used,json=cumulativeGasUsed,proto3" json:"cumulative_gas_used,omitempty"`
	GasUsed           int32           `protobuf:"varint,5,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	ContractAddress   []byte          `protobuf:"bytes,6,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Logs              []*EventData    `protobuf:"bytes,7,rep,name=logs" json:"logs,omitempty"`
	LogsBloom         []byte          `protobuf:"bytes,8,opt,name=logs_bloom,json=logsBloom,proto3" json:"logs_bloom,omitempty"`
	Status            int32           `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	TxHash            []byte          `protobuf:"bytes,10,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	CallerAddress     *types1.Address `protobuf:"bytes,11,opt,name=caller_address,json=callerAddress" json:"caller_address,omitempty"`
	Nonce             int64           `protobuf:"varint,12,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *EvmTxReceipt) Reset()                    { *m = EvmTxReceipt{} }
func (m *EvmTxReceipt) String() string            { return proto.CompactTextString(m) }
func (*EvmTxReceipt) ProtoMessage()               {}
func (*EvmTxReceipt) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{15} }

func (m *EvmTxReceipt) GetTransactionIndex() int32 {
	if m != nil {
		return m.TransactionIndex
	}
	return 0
}

func (m *EvmTxReceipt) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *EvmTxReceipt) GetBlockNumber() int64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *EvmTxReceipt) GetCumulativeGasUsed() int32 {
	if m != nil {
		return m.CumulativeGasUsed
	}
	return 0
}

func (m *EvmTxReceipt) GetGasUsed() int32 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *EvmTxReceipt) GetContractAddress() []byte {
	if m != nil {
		return m.ContractAddress
	}
	return nil
}

func (m *EvmTxReceipt) GetLogs() []*EventData {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *EvmTxReceipt) GetLogsBloom() []byte {
	if m != nil {
		return m.LogsBloom
	}
	return nil
}

func (m *EvmTxReceipt) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *EvmTxReceipt) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *EvmTxReceipt) GetCallerAddress() *types1.Address {
	if m != nil {
		return m.CallerAddress
	}
	return nil
}

func (m *EvmTxReceipt) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type EvmTxObject struct {
	Hash             []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Nonce            uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	BlockHash        []byte `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber      int64  `protobuf:"varint,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TransactionIndex int32  `protobuf:"varint,5,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`
	From             []byte `protobuf:"bytes,6,opt,name=from,proto3" json:"from,omitempty"`
	To               []byte `protobuf:"bytes,7,opt,name=to,proto3" json:"to,omitempty"`
	Value            int64  `protobuf:"varint,8,opt,name=value,proto3" json:"value,omitempty"`
	GasPrice         int64  `protobuf:"varint,9,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	Gas              int64  `protobuf:"varint,10,opt,name=gas,proto3" json:"gas,omitempty"`
	Input            []byte `protobuf:"bytes,11,opt,name=input,proto3" json:"input,omitempty"`
}

func (m *EvmTxObject) Reset()                    { *m = EvmTxObject{} }
func (m *EvmTxObject) String() string            { return proto.CompactTextString(m) }
func (*EvmTxObject) ProtoMessage()               {}
func (*EvmTxObject) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{16} }

func (m *EvmTxObject) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *EvmTxObject) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *EvmTxObject) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *EvmTxObject) GetBlockNumber() int64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *EvmTxObject) GetTransactionIndex() int32 {
	if m != nil {
		return m.TransactionIndex
	}
	return 0
}

func (m *EvmTxObject) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *EvmTxObject) GetTo() []byte {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *EvmTxObject) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *EvmTxObject) GetGasPrice() int64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func (m *EvmTxObject) GetGas() int64 {
	if m != nil {
		return m.Gas
	}
	return 0
}

func (m *EvmTxObject) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

type EthFilterLog struct {
	Removed          bool     `protobuf:"varint,1,opt,name=removed,proto3" json:"removed,omitempty"`
	LogIndex         int64    `protobuf:"varint,2,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	TransactionIndex int32    `protobuf:"varint,3,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`
	TransactionHash  []byte   `protobuf:"bytes,4,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	BlockHash        []byte   `protobuf:"bytes,5,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber      int64    `protobuf:"varint,6,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Address          []byte   `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	Data             []byte   `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	Topics           [][]byte `protobuf:"bytes,9,rep,name=topics" json:"topics,omitempty"`
}

func (m *EthFilterLog) Reset()                    { *m = EthFilterLog{} }
func (m *EthFilterLog) String() string            { return proto.CompactTextString(m) }
func (*EthFilterLog) ProtoMessage()               {}
func (*EthFilterLog) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{17} }

func (m *EthFilterLog) GetRemoved() bool {
	if m != nil {
		return m.Removed
	}
	return false
}

func (m *EthFilterLog) GetLogIndex() int64 {
	if m != nil {
		return m.LogIndex
	}
	return 0
}

func (m *EthFilterLog) GetTransactionIndex() int32 {
	if m != nil {
		return m.TransactionIndex
	}
	return 0
}

func (m *EthFilterLog) GetTransactionHash() []byte {
	if m != nil {
		return m.TransactionHash
	}
	return nil
}

func (m *EthFilterLog) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *EthFilterLog) GetBlockNumber() int64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *EthFilterLog) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *EthFilterLog) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *EthFilterLog) GetTopics() [][]byte {
	if m != nil {
		return m.Topics
	}
	return nil
}

type EthBlockInfo struct {
	Number           int64    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Hash             []byte   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	ParentHash       []byte   `protobuf:"bytes,3,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	Nonce            []byte   `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Sha3Uncles       []byte   `protobuf:"bytes,5,opt,name=sha3_uncles,json=sha3Uncles,proto3" json:"sha3_uncles,omitempty"`
	LogsBloom        []byte   `protobuf:"bytes,6,opt,name=logs_bloom,json=logsBloom,proto3" json:"logs_bloom,omitempty"`
	TransactionsRoot []byte   `protobuf:"bytes,7,opt,name=transactions_root,json=transactionsRoot,proto3" json:"transactions_root,omitempty"`
	StateRoot        []byte   `protobuf:"bytes,8,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	ReceiptsRoot     []byte   `protobuf:"bytes,9,opt,name=receipts_root,json=receiptsRoot,proto3" json:"receipts_root,omitempty"`
	Miner            []byte   `protobuf:"bytes,10,opt,name=miner,proto3" json:"miner,omitempty"`
	Difficulty       int64    `protobuf:"varint,11,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	TotalDifficulty  int64    `protobuf:"varint,12,opt,name=total_difficulty,json=totalDifficulty,proto3" json:"total_difficulty,omitempty"`
	ExtraData        []byte   `protobuf:"bytes,13,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	Size_            int64    `protobuf:"varint,14,opt,name=size,proto3" json:"size,omitempty"`
	GasLimit         int64    `protobuf:"varint,15,opt,name=gasLimit,proto3" json:"gasLimit,omitempty"`
	GasUsed          int64    `protobuf:"varint,16,opt,name=gasUsed,proto3" json:"gasUsed,omitempty"`
	Timestamp        int64    `protobuf:"varint,17,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Transactions     [][]byte `protobuf:"bytes,18,rep,name=transactions" json:"transactions,omitempty"`
	Uncles           [][]byte `protobuf:"bytes,19,rep,name=uncles" json:"uncles,omitempty"`
}

func (m *EthBlockInfo) Reset()                    { *m = EthBlockInfo{} }
func (m *EthBlockInfo) String() string            { return proto.CompactTextString(m) }
func (*EthBlockInfo) ProtoMessage()               {}
func (*EthBlockInfo) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{18} }

func (m *EthBlockInfo) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *EthBlockInfo) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *EthBlockInfo) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *EthBlockInfo) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *EthBlockInfo) GetSha3Uncles() []byte {
	if m != nil {
		return m.Sha3Uncles
	}
	return nil
}

func (m *EthBlockInfo) GetLogsBloom() []byte {
	if m != nil {
		return m.LogsBloom
	}
	return nil
}

func (m *EthBlockInfo) GetTransactionsRoot() []byte {
	if m != nil {
		return m.TransactionsRoot
	}
	return nil
}

func (m *EthBlockInfo) GetStateRoot() []byte {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

func (m *EthBlockInfo) GetReceiptsRoot() []byte {
	if m != nil {
		return m.ReceiptsRoot
	}
	return nil
}

func (m *EthBlockInfo) GetMiner() []byte {
	if m != nil {
		return m.Miner
	}
	return nil
}

func (m *EthBlockInfo) GetDifficulty() int64 {
	if m != nil {
		return m.Difficulty
	}
	return 0
}

func (m *EthBlockInfo) GetTotalDifficulty() int64 {
	if m != nil {
		return m.TotalDifficulty
	}
	return 0
}

func (m *EthBlockInfo) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *EthBlockInfo) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *EthBlockInfo) GetGasLimit() int64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *EthBlockInfo) GetGasUsed() int64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *EthBlockInfo) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *EthBlockInfo) GetTransactions() [][]byte {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *EthBlockInfo) GetUncles() [][]byte {
	if m != nil {
		return m.Uncles
	}
	return nil
}

type EthBlockHashList struct {
	EthBlockHash [][]byte `protobuf:"bytes,1,rep,name=eth_block_hash,json=ethBlockHash" json:"eth_block_hash,omitempty"`
}

func (m *EthBlockHashList) Reset()                    { *m = EthBlockHashList{} }
func (m *EthBlockHashList) String() string            { return proto.CompactTextString(m) }
func (*EthBlockHashList) ProtoMessage()               {}
func (*EthBlockHashList) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{19} }

func (m *EthBlockHashList) GetEthBlockHash() [][]byte {
	if m != nil {
		return m.EthBlockHash
	}
	return nil
}

type EthTxHashList struct {
	EthTxHash [][]byte `protobuf:"bytes,1,rep,name=eth_tx_hash,json=ethTxHash" json:"eth_tx_hash,omitempty"`
}

func (m *EthTxHashList) Reset()                    { *m = EthTxHashList{} }
func (m *EthTxHashList) String() string            { return proto.CompactTextString(m) }
func (*EthTxHashList) ProtoMessage()               {}
func (*EthTxHashList) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{20} }

func (m *EthTxHashList) GetEthTxHash() [][]byte {
	if m != nil {
		return m.EthTxHash
	}
	return nil
}

type EthFilterLogList struct {
	EthBlockLogs []*EthFilterLog `protobuf:"bytes,1,rep,name=eth_block_logs,json=ethBlockLogs" json:"eth_block_logs,omitempty"`
}

func (m *EthFilterLogList) Reset()                    { *m = EthFilterLogList{} }
func (m *EthFilterLogList) String() string            { return proto.CompactTextString(m) }
func (*EthFilterLogList) ProtoMessage()               {}
func (*EthFilterLogList) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{21} }

func (m *EthFilterLogList) GetEthBlockLogs() []*EthFilterLog {
	if m != nil {
		return m.EthBlockLogs
	}
	return nil
}

type EthFilterEnvelope struct {
	// Types that are valid to be assigned to Message:
	//	*EthFilterEnvelope_EthBlockHashList
	//	*EthFilterEnvelope_EthFilterLogList
	//	*EthFilterEnvelope_EthTxHashList
	Message isEthFilterEnvelope_Message `protobuf_oneof:"message"`
}

func (m *EthFilterEnvelope) Reset()                    { *m = EthFilterEnvelope{} }
func (m *EthFilterEnvelope) String() string            { return proto.CompactTextString(m) }
func (*EthFilterEnvelope) ProtoMessage()               {}
func (*EthFilterEnvelope) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{22} }

type isEthFilterEnvelope_Message interface {
	isEthFilterEnvelope_Message()
}

type EthFilterEnvelope_EthBlockHashList struct {
	EthBlockHashList *EthBlockHashList `protobuf:"bytes,1,opt,name=eth_block_hash_list,json=ethBlockHashList,oneof"`
}
type EthFilterEnvelope_EthFilterLogList struct {
	EthFilterLogList *EthFilterLogList `protobuf:"bytes,2,opt,name=eth_filter_log_list,json=ethFilterLogList,oneof"`
}
type EthFilterEnvelope_EthTxHashList struct {
	EthTxHashList *EthTxHashList `protobuf:"bytes,3,opt,name=eth_tx_hash_list,json=ethTxHashList,oneof"`
}

func (*EthFilterEnvelope_EthBlockHashList) isEthFilterEnvelope_Message() {}
func (*EthFilterEnvelope_EthFilterLogList) isEthFilterEnvelope_Message() {}
func (*EthFilterEnvelope_EthTxHashList) isEthFilterEnvelope_Message()    {}

func (m *EthFilterEnvelope) GetMessage() isEthFilterEnvelope_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *EthFilterEnvelope) GetEthBlockHashList() *EthBlockHashList {
	if x, ok := m.GetMessage().(*EthFilterEnvelope_EthBlockHashList); ok {
		return x.EthBlockHashList
	}
	return nil
}

func (m *EthFilterEnvelope) GetEthFilterLogList() *EthFilterLogList {
	if x, ok := m.GetMessage().(*EthFilterEnvelope_EthFilterLogList); ok {
		return x.EthFilterLogList
	}
	return nil
}

func (m *EthFilterEnvelope) GetEthTxHashList() *EthTxHashList {
	if x, ok := m.GetMessage().(*EthFilterEnvelope_EthTxHashList); ok {
		return x.EthTxHashList
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EthFilterEnvelope) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EthFilterEnvelope_OneofMarshaler, _EthFilterEnvelope_OneofUnmarshaler, _EthFilterEnvelope_OneofSizer, []interface{}{
		(*EthFilterEnvelope_EthBlockHashList)(nil),
		(*EthFilterEnvelope_EthFilterLogList)(nil),
		(*EthFilterEnvelope_EthTxHashList)(nil),
	}
}

func _EthFilterEnvelope_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EthFilterEnvelope)
	// message
	switch x := m.Message.(type) {
	case *EthFilterEnvelope_EthBlockHashList:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EthBlockHashList); err != nil {
			return err
		}
	case *EthFilterEnvelope_EthFilterLogList:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EthFilterLogList); err != nil {
			return err
		}
	case *EthFilterEnvelope_EthTxHashList:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EthTxHashList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("EthFilterEnvelope.Message has unexpected type %T", x)
	}
	return nil
}

func _EthFilterEnvelope_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EthFilterEnvelope)
	switch tag {
	case 1: // message.eth_block_hash_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EthBlockHashList)
		err := b.DecodeMessage(msg)
		m.Message = &EthFilterEnvelope_EthBlockHashList{msg}
		return true, err
	case 2: // message.eth_filter_log_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EthFilterLogList)
		err := b.DecodeMessage(msg)
		m.Message = &EthFilterEnvelope_EthFilterLogList{msg}
		return true, err
	case 3: // message.eth_tx_hash_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EthTxHashList)
		err := b.DecodeMessage(msg)
		m.Message = &EthFilterEnvelope_EthTxHashList{msg}
		return true, err
	default:
		return false, nil
	}
}

func _EthFilterEnvelope_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EthFilterEnvelope)
	// message
	switch x := m.Message.(type) {
	case *EthFilterEnvelope_EthBlockHashList:
		s := proto.Size(x.EthBlockHashList)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EthFilterEnvelope_EthFilterLogList:
		s := proto.Size(x.EthFilterLogList)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EthFilterEnvelope_EthTxHashList:
		s := proto.Size(x.EthTxHashList)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GetRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{23} }

func (m *GetRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetResponse struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{24} }

func (m *GetResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type EvmTxReceiptRequest struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *EvmTxReceiptRequest) Reset()                    { *m = EvmTxReceiptRequest{} }
func (m *EvmTxReceiptRequest) String() string            { return proto.CompactTextString(m) }
func (*EvmTxReceiptRequest) ProtoMessage()               {}
func (*EvmTxReceiptRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{25} }

func (m *EvmTxReceiptRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type RangeRequest struct {
	Prefix []byte `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (m *RangeRequest) Reset()                    { *m = RangeRequest{} }
func (m *RangeRequest) String() string            { return proto.CompactTextString(m) }
func (*RangeRequest) ProtoMessage()               {}
func (*RangeRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{26} }

func (m *RangeRequest) GetPrefix() []byte {
	if m != nil {
		return m.Prefix
	}
	return nil
}

type RangeEntry struct {
	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *RangeEntry) Reset()                    { *m = RangeEntry{} }
func (m *RangeEntry) String() string            { return proto.CompactTextString(m) }
func (*RangeEntry) ProtoMessage()               {}
func (*RangeEntry) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{27} }

func (m *RangeEntry) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *RangeEntry) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type RangeResponse struct {
	RangeEntries []*RangeEntry `protobuf:"bytes,1,rep,name=range_entries,json=rangeEntries" json:"range_entries,omitempty"`
}

func (m *RangeResponse) Reset()                    { *m = RangeResponse{} }
func (m *RangeResponse) String() string            { return proto.CompactTextString(m) }
func (*RangeResponse) ProtoMessage()               {}
func (*RangeResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{28} }

func (m *RangeResponse) GetRangeEntries() []*RangeEntry {
	if m != nil {
		return m.RangeEntries
	}
	return nil
}

type HasRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *HasRequest) Reset()                    { *m = HasRequest{} }
func (m *HasRequest) String() string            { return proto.CompactTextString(m) }
func (*HasRequest) ProtoMessage()               {}
func (*HasRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{29} }

func (m *HasRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type HasResponse struct {
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *HasResponse) Reset()                    { *m = HasResponse{} }
func (m *HasResponse) String() string            { return proto.CompactTextString(m) }
func (*HasResponse) ProtoMessage()               {}
func (*HasResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{30} }

func (m *HasResponse) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type ValidatorPowerRequest struct {
	PubKey []byte `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
}

func (m *ValidatorPowerRequest) Reset()                    { *m = ValidatorPowerRequest{} }
func (m *ValidatorPowerRequest) String() string            { return proto.CompactTextString(m) }
func (*ValidatorPowerRequest) ProtoMessage()               {}
func (*ValidatorPowerRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{31} }

func (m *ValidatorPowerRequest) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

type ValidatorPowerResponse struct {
	Power int64 `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *ValidatorPowerResponse) Reset()                    { *m = ValidatorPowerResponse{} }
func (m *ValidatorPowerResponse) String() string            { return proto.CompactTextString(m) }
func (*ValidatorPowerResponse) ProtoMessage()               {}
func (*ValidatorPowerResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{32} }

func (m *ValidatorPowerResponse) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

type CallRequest struct {
	Address *types1.Address `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Input   []byte          `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	VmType  vm.VMType       `protobuf:"varint,3,opt,name=vm_type,json=vmType,proto3,enum=VMType" json:"vm_type,omitempty"`
	Value   *types1.BigUInt `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
}

func (m *CallRequest) Reset()                    { *m = CallRequest{} }
func (m *CallRequest) String() string            { return proto.CompactTextString(m) }
func (*CallRequest) ProtoMessage()               {}
func (*CallRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{33} }

func (m *CallRequest) GetAddress() *types1.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *CallRequest) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *CallRequest) GetVmType() vm.VMType {
	if m != nil {
		return m.VmType
	}
	return vm.VMType_PLUGIN
}

func (m *CallRequest) GetValue() *types1.BigUInt {
	if m != nil {
		return m.Value
	}
	return nil
}

type CallResponse struct {
	Output []byte `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (m *CallResponse) Reset()                    { *m = CallResponse{} }
func (m *CallResponse) String() string            { return proto.CompactTextString(m) }
func (*CallResponse) ProtoMessage()               {}
func (*CallResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{34} }

func (m *CallResponse) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

type SetValidatorPowerRequest struct {
	PubKey []byte `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Power  int64  `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *SetValidatorPowerRequest) Reset()                    { *m = SetValidatorPowerRequest{} }
func (m *SetValidatorPowerRequest) String() string            { return proto.CompactTextString(m) }
func (*SetValidatorPowerRequest) ProtoMessage()               {}
func (*SetValidatorPowerRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{35} }

func (m *SetValidatorPowerRequest) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *SetValidatorPowerRequest) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

type SetValidatorPowerResponse struct {
}

func (m *SetValidatorPowerResponse) Reset()                    { *m = SetValidatorPowerResponse{} }
func (m *SetValidatorPowerResponse) String() string            { return proto.CompactTextString(m) }
func (*SetValidatorPowerResponse) ProtoMessage()               {}
func (*SetValidatorPowerResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{36} }

type ResolveRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ResolveRequest) Reset()                    { *m = ResolveRequest{} }
func (m *ResolveRequest) String() string            { return proto.CompactTextString(m) }
func (*ResolveRequest) ProtoMessage()               {}
func (*ResolveRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{37} }

func (m *ResolveRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ResolveResponse struct {
	Address *types1.Address `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *ResolveResponse) Reset()                    { *m = ResolveResponse{} }
func (m *ResolveResponse) String() string            { return proto.CompactTextString(m) }
func (*ResolveResponse) ProtoMessage()               {}
func (*ResolveResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{38} }

func (m *ResolveResponse) GetAddress() *types1.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type EmitRequest struct {
	Data   []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Topics []string `protobuf:"bytes,2,rep,name=topics" json:"topics,omitempty"`
}

func (m *EmitRequest) Reset()                    { *m = EmitRequest{} }
func (m *EmitRequest) String() string            { return proto.CompactTextString(m) }
func (*EmitRequest) ProtoMessage()               {}
func (*EmitRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{39} }

func (m *EmitRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *EmitRequest) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

type EmitResponse struct {
}

func (m *EmitResponse) Reset()                    { *m = EmitResponse{} }
func (m *EmitResponse) String() string            { return proto.CompactTextString(m) }
func (*EmitResponse) ProtoMessage()               {}
func (*EmitResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{40} }

type SetRequest struct {
	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *SetRequest) Reset()                    { *m = SetRequest{} }
func (m *SetRequest) String() string            { return proto.CompactTextString(m) }
func (*SetRequest) ProtoMessage()               {}
func (*SetRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{41} }

func (m *SetRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SetRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type SetResponse struct {
}

func (m *SetResponse) Reset()                    { *m = SetResponse{} }
func (m *SetResponse) String() string            { return proto.CompactTextString(m) }
func (*SetResponse) ProtoMessage()               {}
func (*SetResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{42} }

type DeleteRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{43} }

func (m *DeleteRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type DeleteResponse struct {
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{44} }

type ContractRecordRequest struct {
	Contract *types1.Address `protobuf:"bytes,1,opt,name=contract" json:"contract,omitempty"`
}

func (m *ContractRecordRequest) Reset()                    { *m = ContractRecordRequest{} }
func (m *ContractRecordRequest) String() string            { return proto.CompactTextString(m) }
func (*ContractRecordRequest) ProtoMessage()               {}
func (*ContractRecordRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{45} }

func (m *ContractRecordRequest) GetContract() *types1.Address {
	if m != nil {
		return m.Contract
	}
	return nil
}

type ContractRecordResponse struct {
	ContractName    string          `protobuf:"bytes,1,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	ContractAddress *types1.Address `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress" json:"contract_address,omitempty"`
	CreatorAddress  *types1.Address `protobuf:"bytes,3,opt,name=creator_address,json=creatorAddress" json:"creator_address,omitempty"`
}

func (m *ContractRecordResponse) Reset()                    { *m = ContractRecordResponse{} }
func (m *ContractRecordResponse) String() string            { return proto.CompactTextString(m) }
func (*ContractRecordResponse) ProtoMessage()               {}
func (*ContractRecordResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{46} }

func (m *ContractRecordResponse) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *ContractRecordResponse) GetContractAddress() *types1.Address {
	if m != nil {
		return m.ContractAddress
	}
	return nil
}

func (m *ContractRecordResponse) GetCreatorAddress() *types1.Address {
	if m != nil {
		return m.CreatorAddress
	}
	return nil
}

func init() {
	proto.RegisterType((*PluginCode)(nil), "PluginCode")
	proto.RegisterType((*Request)(nil), "Request")
	proto.RegisterType((*Response)(nil), "Response")
	proto.RegisterType((*Message)(nil), "Message")
	proto.RegisterType((*ContractMeta)(nil), "ContractMeta")
	proto.RegisterType((*ContractMethodCall)(nil), "ContractMethodCall")
	proto.RegisterType((*Context)(nil), "Context")
	proto.RegisterType((*MetaRequest)(nil), "MetaRequest")
	proto.RegisterType((*ContractCallRequest)(nil), "ContractCallRequest")
	proto.RegisterType((*InitResponse)(nil), "InitResponse")
	proto.RegisterType((*EthMessage)(nil), "EthMessage")
	proto.RegisterType((*EventDataList)(nil), "EventDataList")
	proto.RegisterType((*EventData)(nil), "EventData")
	proto.RegisterType((*EvmTxReceiptList)(nil), "EvmTxReceiptList")
	proto.RegisterType((*EvmTxReceiptListItem)(nil), "EvmTxReceiptListItem")
	proto.RegisterType((*EvmTxReceipt)(nil), "EvmTxReceipt")
	proto.RegisterType((*EvmTxObject)(nil), "EvmTxObject")
	proto.RegisterType((*EthFilterLog)(nil), "EthFilterLog")
	proto.RegisterType((*EthBlockInfo)(nil), "EthBlockInfo")
	proto.RegisterType((*EthBlockHashList)(nil), "EthBlockHashList")
	proto.RegisterType((*EthTxHashList)(nil), "EthTxHashList")
	proto.RegisterType((*EthFilterLogList)(nil), "EthFilterLogList")
	proto.RegisterType((*EthFilterEnvelope)(nil), "EthFilterEnvelope")
	proto.RegisterType((*GetRequest)(nil), "GetRequest")
	proto.RegisterType((*GetResponse)(nil), "GetResponse")
	proto.RegisterType((*EvmTxReceiptRequest)(nil), "EvmTxReceiptRequest")
	proto.RegisterType((*RangeRequest)(nil), "RangeRequest")
	proto.RegisterType((*RangeEntry)(nil), "RangeEntry")
	proto.RegisterType((*RangeResponse)(nil), "RangeResponse")
	proto.RegisterType((*HasRequest)(nil), "HasRequest")
	proto.RegisterType((*HasResponse)(nil), "HasResponse")
	proto.RegisterType((*ValidatorPowerRequest)(nil), "ValidatorPowerRequest")
	proto.RegisterType((*ValidatorPowerResponse)(nil), "ValidatorPowerResponse")
	proto.RegisterType((*CallRequest)(nil), "CallRequest")
	proto.RegisterType((*CallResponse)(nil), "CallResponse")
	proto.RegisterType((*SetValidatorPowerRequest)(nil), "SetValidatorPowerRequest")
	proto.RegisterType((*SetValidatorPowerResponse)(nil), "SetValidatorPowerResponse")
	proto.RegisterType((*ResolveRequest)(nil), "ResolveRequest")
	proto.RegisterType((*ResolveResponse)(nil), "ResolveResponse")
	proto.RegisterType((*EmitRequest)(nil), "EmitRequest")
	proto.RegisterType((*EmitResponse)(nil), "EmitResponse")
	proto.RegisterType((*SetRequest)(nil), "SetRequest")
	proto.RegisterType((*SetResponse)(nil), "SetResponse")
	proto.RegisterType((*DeleteRequest)(nil), "DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "DeleteResponse")
	proto.RegisterType((*ContractRecordRequest)(nil), "ContractRecordRequest")
	proto.RegisterType((*ContractRecordResponse)(nil), "ContractRecordResponse")
	proto.RegisterEnum("EncodingType", EncodingType_name, EncodingType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Contract service

type ContractClient interface {
	Meta(ctx context.Context, in *MetaRequest, opts ...grpc.CallOption) (*ContractMeta, error)
	Init(ctx context.Context, in *ContractCallRequest, opts ...grpc.CallOption) (*InitResponse, error)
	Call(ctx context.Context, in *ContractCallRequest, opts ...grpc.CallOption) (*Response, error)
	StaticCall(ctx context.Context, in *ContractCallRequest, opts ...grpc.CallOption) (*Response, error)
}

type contractClient struct {
	cc *grpc.ClientConn
}

func NewContractClient(cc *grpc.ClientConn) ContractClient {
	return &contractClient{cc}
}

func (c *contractClient) Meta(ctx context.Context, in *MetaRequest, opts ...grpc.CallOption) (*ContractMeta, error) {
	out := new(ContractMeta)
	err := grpc.Invoke(ctx, "/Contract/Meta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractClient) Init(ctx context.Context, in *ContractCallRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	out := new(InitResponse)
	err := grpc.Invoke(ctx, "/Contract/Init", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractClient) Call(ctx context.Context, in *ContractCallRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/Contract/Call", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractClient) StaticCall(ctx context.Context, in *ContractCallRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/Contract/StaticCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Contract service

type ContractServer interface {
	Meta(context.Context, *MetaRequest) (*ContractMeta, error)
	Init(context.Context, *ContractCallRequest) (*InitResponse, error)
	Call(context.Context, *ContractCallRequest) (*Response, error)
	StaticCall(context.Context, *ContractCallRequest) (*Response, error)
}

func RegisterContractServer(s *grpc.Server, srv ContractServer) {
	s.RegisterService(&_Contract_serviceDesc, srv)
}

func _Contract_Meta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServer).Meta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Contract/Meta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServer).Meta(ctx, req.(*MetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contract_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Contract/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServer).Init(ctx, req.(*ContractCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contract_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Contract/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServer).Call(ctx, req.(*ContractCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contract_StaticCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServer).StaticCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Contract/StaticCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServer).StaticCall(ctx, req.(*ContractCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Contract_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Contract",
	HandlerType: (*ContractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Meta",
			Handler:    _Contract_Meta_Handler,
		},
		{
			MethodName: "Init",
			Handler:    _Contract_Init_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _Contract_Call_Handler,
		},
		{
			MethodName: "StaticCall",
			Handler:    _Contract_StaticCall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/loomnetwork/go-loom/plugin/types/types.proto",
}

// Client API for API service

type APIClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Has(ctx context.Context, in *HasRequest, opts ...grpc.CallOption) (*HasResponse, error)
	Range(ctx context.Context, in *RangeRequest, opts ...grpc.CallOption) (*RangeResponse, error)
	ValidatorPower(ctx context.Context, in *ValidatorPowerRequest, opts ...grpc.CallOption) (*ValidatorPowerResponse, error)
	StaticCall(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error)
	Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveResponse, error)
	Emit(ctx context.Context, in *EmitRequest, opts ...grpc.CallOption) (*EmitResponse, error)
	GetEvmTxReceipt(ctx context.Context, in *EvmTxReceiptRequest, opts ...grpc.CallOption) (*EvmTxReceipt, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error)
	SetValidatorPower(ctx context.Context, in *SetValidatorPowerRequest, opts ...grpc.CallOption) (*SetValidatorPowerResponse, error)
	ContractRecord(ctx context.Context, in *ContractRecordRequest, opts ...grpc.CallOption) (*ContractRecordResponse, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/API/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Has(ctx context.Context, in *HasRequest, opts ...grpc.CallOption) (*HasResponse, error) {
	out := new(HasResponse)
	err := grpc.Invoke(ctx, "/API/Has", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Range(ctx context.Context, in *RangeRequest, opts ...grpc.CallOption) (*RangeResponse, error) {
	out := new(RangeResponse)
	err := grpc.Invoke(ctx, "/API/Range", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ValidatorPower(ctx context.Context, in *ValidatorPowerRequest, opts ...grpc.CallOption) (*ValidatorPowerResponse, error) {
	out := new(ValidatorPowerResponse)
	err := grpc.Invoke(ctx, "/API/ValidatorPower", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) StaticCall(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error) {
	out := new(CallResponse)
	err := grpc.Invoke(ctx, "/API/StaticCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveResponse, error) {
	out := new(ResolveResponse)
	err := grpc.Invoke(ctx, "/API/Resolve", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Emit(ctx context.Context, in *EmitRequest, opts ...grpc.CallOption) (*EmitResponse, error) {
	out := new(EmitResponse)
	err := grpc.Invoke(ctx, "/API/Emit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetEvmTxReceipt(ctx context.Context, in *EvmTxReceiptRequest, opts ...grpc.CallOption) (*EvmTxReceipt, error) {
	out := new(EvmTxReceipt)
	err := grpc.Invoke(ctx, "/API/GetEvmTxReceipt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := grpc.Invoke(ctx, "/API/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/API/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error) {
	out := new(CallResponse)
	err := grpc.Invoke(ctx, "/API/Call", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetValidatorPower(ctx context.Context, in *SetValidatorPowerRequest, opts ...grpc.CallOption) (*SetValidatorPowerResponse, error) {
	out := new(SetValidatorPowerResponse)
	err := grpc.Invoke(ctx, "/API/SetValidatorPower", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ContractRecord(ctx context.Context, in *ContractRecordRequest, opts ...grpc.CallOption) (*ContractRecordResponse, error) {
	out := new(ContractRecordResponse)
	err := grpc.Invoke(ctx, "/API/ContractRecord", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Has(context.Context, *HasRequest) (*HasResponse, error)
	Range(context.Context, *RangeRequest) (*RangeResponse, error)
	ValidatorPower(context.Context, *ValidatorPowerRequest) (*ValidatorPowerResponse, error)
	StaticCall(context.Context, *CallRequest) (*CallResponse, error)
	Resolve(context.Context, *ResolveRequest) (*ResolveResponse, error)
	Emit(context.Context, *EmitRequest) (*EmitResponse, error)
	GetEvmTxReceipt(context.Context, *EvmTxReceiptRequest) (*EvmTxReceipt, error)
	Set(context.Context, *SetRequest) (*SetResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Call(context.Context, *CallRequest) (*CallResponse, error)
	SetValidatorPower(context.Context, *SetValidatorPowerRequest) (*SetValidatorPowerResponse, error)
	ContractRecord(context.Context, *ContractRecordRequest) (*ContractRecordResponse, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Has_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Has(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/Has",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Has(ctx, req.(*HasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Range_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Range(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/Range",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Range(ctx, req.(*RangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ValidatorPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatorPowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ValidatorPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/ValidatorPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ValidatorPower(ctx, req.(*ValidatorPowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_StaticCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).StaticCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/StaticCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).StaticCall(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Resolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Resolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/Resolve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Resolve(ctx, req.(*ResolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Emit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Emit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/Emit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Emit(ctx, req.(*EmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetEvmTxReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvmTxReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetEvmTxReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/GetEvmTxReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetEvmTxReceipt(ctx, req.(*EvmTxReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Call(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetValidatorPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetValidatorPowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetValidatorPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/SetValidatorPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetValidatorPower(ctx, req.(*SetValidatorPowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ContractRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ContractRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/ContractRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ContractRecord(ctx, req.(*ContractRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _API_Get_Handler,
		},
		{
			MethodName: "Has",
			Handler:    _API_Has_Handler,
		},
		{
			MethodName: "Range",
			Handler:    _API_Range_Handler,
		},
		{
			MethodName: "ValidatorPower",
			Handler:    _API_ValidatorPower_Handler,
		},
		{
			MethodName: "StaticCall",
			Handler:    _API_StaticCall_Handler,
		},
		{
			MethodName: "Resolve",
			Handler:    _API_Resolve_Handler,
		},
		{
			MethodName: "Emit",
			Handler:    _API_Emit_Handler,
		},
		{
			MethodName: "GetEvmTxReceipt",
			Handler:    _API_GetEvmTxReceipt_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _API_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _API_Delete_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _API_Call_Handler,
		},
		{
			MethodName: "SetValidatorPower",
			Handler:    _API_SetValidatorPower_Handler,
		},
		{
			MethodName: "ContractRecord",
			Handler:    _API_ContractRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/loomnetwork/go-loom/plugin/types/types.proto",
}

func init() {
	proto.RegisterFile("github.com/loomnetwork/go-loom/plugin/types/types.proto", fileDescriptorTypes)
}

var fileDescriptorTypes = []byte{
	// 2140 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0xdd, 0x76, 0xdb, 0xc6,
	0x11, 0x0e, 0xff, 0xc5, 0xe1, 0x8f, 0xa8, 0xb5, 0x22, 0xd3, 0x4c, 0xed, 0x28, 0xb0, 0x1b, 0xdb,
	0x71, 0xb3, 0x72, 0xad, 0x34, 0x6d, 0x2e, 0x7a, 0x4e, 0x2d, 0x5b, 0xb1, 0x94, 0xfa, 0x47, 0x07,
	0xb2, 0x73, 0xd7, 0x83, 0x03, 0x82, 0x23, 0x12, 0x35, 0x80, 0x65, 0x81, 0x25, 0x23, 0xf5, 0x0d,
	0xfa, 0x20, 0xbe, 0xc9, 0x75, 0x5f, 0xa0, 0x37, 0x7d, 0x83, 0x3e, 0x40, 0xaf, 0xfb, 0x12, 0x3d,
	0x3b, 0xbb, 0x00, 0x01, 0xfe, 0x44, 0x69, 0xcf, 0xf1, 0xb1, 0x76, 0x66, 0x67, 0x67, 0x67, 0xbe,
	0xf9, 0x59, 0x0c, 0xe1, 0xb7, 0x63, 0x5f, 0x4e, 0x66, 0x43, 0xee, 0x89, 0xf0, 0x20, 0x10, 0x22,
	0x8c, 0x50, 0xfe, 0x20, 0xe2, 0xf7, 0x07, 0x63, 0xf1, 0xa5, 0x22, 0x0f, 0xa6, 0xc1, 0x6c, 0xec,
	0x47, 0x07, 0xf2, 0x6a, 0x8a, 0x89, 0xfe, 0x9f, 0x4f, 0x63, 0x21, 0xc5, 0xe0, 0xf1, 0x35, 0x07,
	0x57, 0x4f, 0x7c, 0x71, 0xcd, 0x89, 0xb9, 0xfa, 0xa7, 0x65, 0xad, 0xaf, 0x01, 0xce, 0xe8, 0xe6,
	0x67, 0x62, 0x84, 0x8c, 0x41, 0x35, 0x72, 0x43, 0xec, 0x97, 0xf6, 0x4b, 0x0f, 0x9a, 0x36, 0xad,
	0xd9, 0x2e, 0xd4, 0xfc, 0x68, 0x3a, 0x93, 0xfd, 0xf2, 0x7e, 0xe9, 0x41, 0xdb, 0xd6, 0x84, 0x35,
	0x87, 0x86, 0x8d, 0x7f, 0x99, 0x61, 0x22, 0xd9, 0x63, 0x68, 0x7b, 0x22, 0x92, 0x18, 0x49, 0x47,
	0x59, 0x41, 0x87, 0xbb, 0x4f, 0x3a, 0xfc, 0x38, 0xf2, 0xc4, 0xc8, 0x8f, 0xc6, 0x6f, 0xaf, 0xa6,
	0x68, 0xb7, 0x8c, 0x88, 0x22, 0xd8, 0x2f, 0xa1, 0xee, 0x7a, 0x1e, 0x4e, 0xb5, 0xce, 0x15, 0x59,
	0xb3, 0xa9, 0xac, 0x19, 0x8a, 0xd1, 0x55, 0xbf, 0x42, 0x17, 0xd3, 0xda, 0x3a, 0x83, 0x2d, 0x1b,
	0x93, 0xa9, 0x88, 0x12, 0xfc, 0x3f, 0x2e, 0x4e, 0x35, 0x96, 0x73, 0x1a, 0x1f, 0x41, 0xe3, 0x15,
	0x26, 0x89, 0x3b, 0x46, 0xb6, 0x0f, 0xf5, 0x04, 0xa3, 0x11, 0xc6, 0xa4, 0xaa, 0xf5, 0x64, 0x8b,
	0x3f, 0x1d, 0x8d, 0x62, 0x4c, 0x12, 0xdb, 0xf0, 0xad, 0x3f, 0x41, 0xfb, 0x99, 0x88, 0x64, 0xec,
	0x7a, 0xf2, 0x15, 0x4a, 0x77, 0x2d, 0x60, 0x7d, 0x68, 0xcc, 0x31, 0x4e, 0x7c, 0x11, 0xd1, 0x3d,
	0x4d, 0x3b, 0x25, 0xd9, 0xa7, 0xd0, 0x0a, 0x51, 0xc6, 0xbe, 0xe7, 0xb8, 0xa3, 0x51, 0x4c, 0x7e,
	0x35, 0x6d, 0xd0, 0x2c, 0x75, 0x93, 0xf5, 0x07, 0x60, 0x39, 0xf5, 0x13, 0x31, 0x7a, 0xe6, 0x06,
	0x01, 0xdb, 0x83, 0x7a, 0x48, 0x94, 0xb9, 0xc6, 0x50, 0xea, 0x72, 0x37, 0x1e, 0x27, 0xa9, 0x37,
	0x6a, 0x6d, 0x35, 0xa1, 0xa1, 0x34, 0xe0, 0xa5, 0xb4, 0x3a, 0xd0, 0x52, 0x36, 0x9a, 0x30, 0x59,
	0xff, 0x2a, 0xc1, 0x8d, 0x54, 0xb9, 0x52, 0x9b, 0x86, 0xcf, 0x82, 0xda, 0x30, 0x10, 0xde, 0x7b,
	0xe3, 0x73, 0x9b, 0x1f, 0x29, 0xea, 0x04, 0xdd, 0x11, 0xc6, 0xb6, 0xde, 0x62, 0x16, 0x34, 0x42,
	0x8d, 0x11, 0x5d, 0xa6, 0x90, 0x31, 0x98, 0xd9, 0xe9, 0x06, 0x3b, 0x84, 0x9e, 0x67, 0xd4, 0x93,
	0x7b, 0x98, 0x24, 0xe4, 0x61, 0x1e, 0xc6, 0xed, 0x54, 0xc2, 0x30, 0xd8, 0x6d, 0x00, 0x77, 0xea,
	0x3b, 0x09, 0xc6, 0x73, 0x8c, 0xfb, 0xd5, 0xfd, 0xd2, 0x83, 0x8e, 0xdd, 0x74, 0xa7, 0xfe, 0x39,
	0x31, 0xd4, 0xbd, 0xb1, 0x36, 0xb3, 0x5f, 0x33, 0xaa, 0x8c, 0xd9, 0x76, 0xba, 0x61, 0x75, 0xa1,
	0x7d, 0x1a, 0xf9, 0x32, 0xcd, 0x0a, 0xeb, 0x31, 0xc0, 0xb1, 0x9c, 0xa4, 0x21, 0x4d, 0x23, 0x5e,
	0x5a, 0x44, 0x9c, 0x75, 0xa1, 0xec, 0x8f, 0x4c, 0x6c, 0xca, 0xfe, 0xc8, 0x3a, 0x84, 0xce, 0xf1,
	0x1c, 0x23, 0xf9, 0xdc, 0x95, 0xee, 0x4b, 0x9f, 0x20, 0xa9, 0xa3, 0x62, 0x24, 0xfd, 0xd2, 0x7e,
	0xe5, 0x41, 0xeb, 0x09, 0xf0, 0x6c, 0xdf, 0x36, 0x3b, 0xd6, 0x3f, 0xca, 0xd0, 0xcc, 0xb8, 0x2a,
	0x44, 0x52, 0x4c, 0x7d, 0x4f, 0x9f, 0x68, 0xda, 0x86, 0x52, 0x19, 0xe5, 0xb9, 0x41, 0x80, 0x71,
	0x86, 0x5b, 0x96, 0x51, 0x9a, 0xaf, 0x5c, 0xdc, 0x84, 0x56, 0xba, 0xa1, 0xf2, 0x46, 0xb7, 0x07,
	0x87, 0x92, 0xad, 0xaa, 0xf3, 0x46, 0xb3, 0x5e, 0xab, 0x94, 0xfb, 0x0c, 0xda, 0x14, 0x28, 0x67,
	0x82, 0xfe, 0x78, 0xa2, 0xc1, 0xaa, 0xda, 0xad, 0xa1, 0x8e, 0xa4, 0x62, 0x29, 0x11, 0x54, 0x75,
	0x81, 0x23, 0x87, 0x00, 0xa9, 0x13, 0x20, 0x2d, 0xc3, 0x3b, 0x52, 0xb8, 0x3c, 0x84, 0x9e, 0x88,
	0xfd, 0xb1, 0x1f, 0xb9, 0x81, 0x93, 0xc2, 0xde, 0x20, 0xb1, 0xed, 0x94, 0x9f, 0x26, 0xcd, 0x4d,
	0x68, 0xc8, 0x4b, 0x67, 0xe2, 0x26, 0x93, 0xfe, 0x16, 0x49, 0xd4, 0xe5, 0xe5, 0x89, 0x9b, 0x4c,
	0xd8, 0x23, 0xd8, 0x91, 0xb1, 0x1b, 0x25, 0xae, 0x27, 0x7d, 0x11, 0x39, 0x7e, 0x34, 0xc2, 0xcb,
	0x7e, 0x93, 0xcc, 0xe9, 0xe5, 0x36, 0x4e, 0x15, 0xdf, 0x3a, 0x82, 0xde, 0xf1, 0x3c, 0x7c, 0x7b,
	0x69, 0xa3, 0x87, 0xfe, 0x54, 0x12, 0xf6, 0x1c, 0x5a, 0xf2, 0xd2, 0x89, 0x35, 0x27, 0x0d, 0x40,
	0x87, 0xe7, 0xe5, 0x6c, 0x90, 0xe9, 0x32, 0xb1, 0x1c, 0xd8, 0x5d, 0xd6, 0x71, 0x2a, 0x31, 0x64,
	0xf7, 0x55, 0xea, 0x10, 0xcb, 0x24, 0xf6, 0x92, 0x8e, 0x74, 0x97, 0xdd, 0x01, 0x88, 0xf0, 0x52,
	0xbe, 0x25, 0xfb, 0x4d, 0x2d, 0xe5, 0x38, 0xd6, 0x8f, 0x15, 0x68, 0xe7, 0x4f, 0xae, 0x77, 0x51,
	0xdd, 0x51, 0x5b, 0x75, 0x51, 0x25, 0xb8, 0x89, 0xcc, 0x42, 0x7b, 0x53, 0xc7, 0x45, 0xc1, 0x95,
	0x05, 0x2e, 0x9a, 0x85, 0x43, 0xd4, 0x2d, 0xa1, 0x62, 0x02, 0xf7, 0x9a, 0x58, 0x8c, 0xc3, 0x0d,
	0x6f, 0x16, 0xce, 0x02, 0x57, 0xfa, 0x73, 0x74, 0xc6, 0x6e, 0xe2, 0xcc, 0x12, 0x1c, 0x51, 0x12,
	0xd4, 0xec, 0x9d, 0xc5, 0xd6, 0x0b, 0x37, 0x79, 0x97, 0xe0, 0x88, 0xdd, 0x82, 0xad, 0x4c, 0xa8,
	0x46, 0x42, 0x8d, 0xb1, 0xd9, 0x7a, 0xb8, 0xa6, 0x44, 0x75, 0x1e, 0xac, 0x14, 0xe6, 0x1d, 0xa8,
	0x06, 0x62, 0x9c, 0xf4, 0x1b, 0x2b, 0x05, 0x40, 0x7c, 0xe5, 0x97, 0xfa, 0xeb, 0x0c, 0xd5, 0x8b,
	0x62, 0x72, 0xa0, 0xa9, 0x38, 0x47, 0x8a, 0xa1, 0xea, 0x21, 0x91, 0xae, 0x9c, 0x25, 0x14, 0xfb,
	0x9a, 0x6d, 0xa8, 0x7c, 0xde, 0x40, 0x21, 0x6f, 0x0e, 0xa0, 0xab, 0x0b, 0x22, 0x33, 0xac, 0xb5,
	0x54, 0x0d, 0x1d, 0xbd, 0x9f, 0x1a, 0xb8, 0x0b, 0xb5, 0x48, 0x44, 0x1e, 0xf6, 0xdb, 0x04, 0x99,
	0x26, 0xac, 0x0f, 0x65, 0x68, 0x51, 0xb0, 0xde, 0x0c, 0xff, 0x8c, 0x1e, 0x3d, 0x21, 0x74, 0x99,
	0x29, 0x7f, 0xb5, 0x5e, 0x9c, 0x2c, 0x53, 0x5a, 0x6a, 0x62, 0x29, 0x50, 0x95, 0xeb, 0x02, 0x55,
	0x5d, 0x0d, 0xd4, 0xda, 0xbc, 0xa8, 0x6d, 0xc8, 0x0b, 0x06, 0xd5, 0x8b, 0x58, 0x84, 0x06, 0x7e,
	0x5a, 0xab, 0xbe, 0x24, 0x85, 0xa9, 0xb8, 0xb2, 0x14, 0xca, 0xd0, 0xb9, 0x1b, 0xcc, 0x90, 0xe0,
	0xad, 0xd8, 0x9a, 0x60, 0x9f, 0x40, 0x53, 0xc5, 0x77, 0x1a, 0xfb, 0x1e, 0x12, 0xba, 0x15, 0x5b,
	0x05, 0xfc, 0x4c, 0xd1, 0xac, 0x07, 0x95, 0xb1, 0x9b, 0x10, 0xb6, 0x15, 0x5b, 0x2d, 0x17, 0xcf,
	0x77, 0x2b, 0xff, 0x7c, 0x7f, 0x28, 0x43, 0xfb, 0x58, 0x4e, 0xbe, 0xf5, 0x03, 0x89, 0xf1, 0x4b,
	0x31, 0x56, 0x8f, 0x56, 0x8c, 0xa1, 0x98, 0xa3, 0x7e, 0x64, 0xb6, 0xec, 0x94, 0x54, 0xf7, 0x05,
	0x62, 0x6c, 0xdc, 0x29, 0xeb, 0xfb, 0x02, 0x31, 0xd6, 0x6e, 0xac, 0xf5, 0xb9, 0xb2, 0xc1, 0xe7,
	0x87, 0x90, 0xe7, 0x69, 0xa0, 0xab, 0x3a, 0xfd, 0x72, 0x7c, 0x82, 0xbb, 0x18, 0x8d, 0xda, 0x75,
	0xd1, 0xa8, 0xaf, 0x46, 0xa3, 0xbf, 0xe8, 0xab, 0x1a, 0xd1, 0xac, 0x9b, 0x32, 0xa8, 0x8e, 0x5c,
	0xe9, 0x9a, 0xa4, 0xa5, 0x75, 0xae, 0x7f, 0x37, 0xf7, 0x2b, 0x94, 0x96, 0x44, 0x59, 0xff, 0xac,
	0x12, 0x4e, 0xf4, 0x24, 0x9e, 0x46, 0x17, 0x42, 0x09, 0x9a, 0x3b, 0x4b, 0x74, 0xa7, 0xa1, 0xb2,
	0x44, 0x2b, 0xe7, 0x12, 0x4d, 0xb5, 0x6d, 0x37, 0x56, 0x9f, 0x27, 0xb9, 0x9c, 0x02, 0xcd, 0x3a,
	0x29, 0x64, 0xa2, 0x46, 0xc1, 0x64, 0xe2, 0xa7, 0xd0, 0x4a, 0x26, 0xee, 0xa1, 0x33, 0x8b, 0xbc,
	0x00, 0x13, 0xe3, 0x3c, 0x28, 0xd6, 0x3b, 0xe2, 0x2c, 0xd5, 0x5e, 0x7d, 0xb9, 0xf6, 0x8a, 0x31,
	0x49, 0x9c, 0x58, 0x88, 0xb4, 0x8f, 0xe7, 0xf1, 0x4f, 0x6c, 0x21, 0xa4, 0xd2, 0xa5, 0x4a, 0x13,
	0xb5, 0x94, 0xa9, 0x63, 0xe2, 0xd0, 0xf6, 0x5d, 0xe8, 0xa4, 0xad, 0x58, 0x4b, 0x34, 0x49, 0xa2,
	0x9d, 0x32, 0x49, 0x68, 0x17, 0x6a, 0xa1, 0x1f, 0x61, 0x6c, 0x4a, 0x5a, 0x13, 0xaa, 0xaf, 0x8e,
	0xfc, 0x8b, 0x0b, 0xdf, 0x9b, 0x05, 0xf2, 0x8a, 0xb2, 0xaf, 0x62, 0xe7, 0x38, 0x94, 0x0d, 0x42,
	0xba, 0x81, 0x93, 0x93, 0xd2, 0xb5, 0xbc, 0x4d, 0xfc, 0xe7, 0x0b, 0xd1, 0xdb, 0x00, 0x78, 0x29,
	0x63, 0xd7, 0xa1, 0xb8, 0x75, 0xb4, 0x91, 0xc4, 0xa1, 0xc7, 0x97, 0x41, 0x35, 0xf1, 0xff, 0x8a,
	0xfd, 0x2e, 0x9d, 0xa6, 0x35, 0x1b, 0x50, 0x17, 0x7c, 0xe9, 0x87, 0xbe, 0xec, 0x6f, 0x67, 0x45,
	0x42, 0xb4, 0x4a, 0x0d, 0xd3, 0x11, 0xfb, 0x3d, 0xda, 0xca, 0x1a, 0xe4, 0x2f, 0xa0, 0x29, 0xfd,
	0x10, 0x13, 0xe9, 0x86, 0xd3, 0xfe, 0x0e, 0xed, 0x2d, 0x18, 0xcc, 0x82, 0x76, 0x1e, 0xbf, 0x3e,
	0xa3, 0x54, 0x29, 0xf0, 0x54, 0x7e, 0x98, 0xb8, 0xdd, 0xd0, 0x89, 0xa4, 0x29, 0xeb, 0x77, 0xd0,
	0x4b, 0xf3, 0x48, 0x85, 0x9e, 0x9e, 0xba, 0x7b, 0xd0, 0x45, 0x39, 0x71, 0x72, 0x89, 0x5e, 0xd2,
	0x1a, 0x31, 0x27, 0x69, 0x1d, 0x40, 0xe7, 0x58, 0x4e, 0xf4, 0x63, 0x44, 0xc7, 0xee, 0x40, 0x4b,
	0x1d, 0x4b, 0xfb, 0xa8, 0x3e, 0xd3, 0xc4, 0x54, 0xc6, 0x7a, 0x41, 0x57, 0x65, 0xa5, 0x4d, 0x67,
	0x0e, 0xf3, 0x57, 0x51, 0x63, 0xcf, 0x1e, 0xd6, 0x9c, 0xe8, 0xe2, 0xe6, 0x97, 0x62, 0x9c, 0x58,
	0xff, 0x2e, 0xc1, 0x4e, 0xb6, 0x7d, 0x1c, 0xcd, 0x31, 0x10, 0x53, 0x64, 0x47, 0x70, 0xa3, 0x68,
	0xb5, 0x13, 0xf8, 0x49, 0xfa, 0xc8, 0xee, 0xf0, 0x65, 0x2f, 0x4f, 0x3e, 0xb2, 0x7b, 0xb8, 0xec,
	0xb9, 0xd1, 0x71, 0x41, 0x9a, 0x95, 0x3d, 0x5a, 0x47, 0x79, 0xa1, 0xa3, 0x60, 0xbe, 0xd1, 0x51,
	0x74, 0xe9, 0x1b, 0xe8, 0xe5, 0x60, 0xd0, 0x0a, 0xf4, 0x17, 0x54, 0x97, 0x17, 0x00, 0x3b, 0xf9,
	0xc8, 0xee, 0x60, 0x9e, 0x71, 0xd4, 0xcc, 0x3e, 0x67, 0xad, 0x3b, 0x00, 0x2f, 0x50, 0xa6, 0x9f,
	0x35, 0x3d, 0xa8, 0xbc, 0xc7, 0xf4, 0x63, 0x51, 0x2d, 0xad, 0xbb, 0xd0, 0xa2, 0x7d, 0x33, 0x72,
	0x64, 0x2d, 0x59, 0x8b, 0x68, 0xc2, 0x7a, 0x04, 0x37, 0x0a, 0xdf, 0x16, 0x46, 0xdb, 0x7a, 0xe1,
	0xcf, 0xa1, 0x6d, 0xbb, 0xd1, 0x18, 0x53, 0xa9, 0x3d, 0xa8, 0x4f, 0x63, 0xbc, 0xf0, 0x2f, 0x8d,
	0x98, 0xa1, 0xac, 0xaf, 0x00, 0x48, 0xee, 0x38, 0x92, 0xf1, 0xd5, 0xaa, 0x65, 0x0b, 0xed, 0xe5,
	0xbc, 0xf6, 0xa7, 0xd0, 0x31, 0xda, 0xb3, 0x21, 0xa9, 0x13, 0x2b, 0x86, 0x83, 0x91, 0x8c, 0x7d,
	0x4c, 0x03, 0xdf, 0xe2, 0x0b, 0xe5, 0x76, 0x3b, 0x4e, 0xd7, 0x3e, 0x26, 0x0a, 0x92, 0x13, 0x37,
	0xf9, 0x49, 0x48, 0x68, 0x7f, 0x1d, 0x24, 0x5b, 0xa9, 0x1d, 0x8f, 0xe1, 0xe3, 0xef, 0xdd, 0xc0,
	0x1f, 0xb9, 0x52, 0xc4, 0x67, 0xe2, 0x07, 0x8c, 0x73, 0x5f, 0x8e, 0xd3, 0xd9, 0xd0, 0x59, 0xe8,
	0xac, 0x4f, 0x67, 0xc3, 0x3f, 0xe2, 0x95, 0xc5, 0x61, 0x6f, 0xf9, 0xc4, 0xe2, 0x86, 0xa9, 0x62,
	0x98, 0xd7, 0x47, 0x13, 0xd6, 0xdf, 0x4a, 0xd0, 0x2a, 0xce, 0x31, 0x59, 0xc3, 0x2f, 0x6d, 0xfa,
	0x90, 0x5e, 0x3b, 0xcb, 0xb2, 0x7d, 0x68, 0xcc, 0x43, 0x3d, 0x42, 0x56, 0x68, 0x84, 0x6c, 0xf0,
	0xef, 0x5f, 0xe9, 0x49, 0x74, 0x1e, 0xd2, 0xdc, 0x78, 0x27, 0xf5, 0xb1, 0x6a, 0x34, 0x1f, 0xf9,
	0xe3, 0x77, 0xa7, 0x91, 0xcc, 0xc5, 0x54, 0x9b, 0x62, 0x2c, 0xde, 0x83, 0xba, 0x98, 0x49, 0x75,
	0x91, 0xf1, 0x51, 0x53, 0xd6, 0x29, 0xf4, 0xcf, 0x51, 0xfe, 0x6f, 0xc0, 0x6c, 0x70, 0xff, 0x13,
	0xb8, 0xb5, 0x46, 0x95, 0x99, 0x81, 0xee, 0x41, 0xd7, 0xc6, 0x44, 0x04, 0xf3, 0x2c, 0xcb, 0xd6,
	0x0c, 0xaa, 0xd6, 0x6f, 0x60, 0x3b, 0x93, 0x32, 0x86, 0xff, 0x0c, 0x10, 0xad, 0x6f, 0xa0, 0x75,
	0x1c, 0xfa, 0x32, 0xa7, 0x99, 0xda, 0x72, 0x69, 0xed, 0x73, 0x5a, 0xce, 0x8f, 0x43, 0x6a, 0x56,
	0xd3, 0x47, 0x8d, 0x9d, 0x5f, 0x01, 0x9c, 0xff, 0x44, 0xf5, 0x6d, 0xc8, 0xf1, 0x0e, 0xb4, 0xce,
	0x17, 0x35, 0x69, 0x7d, 0x06, 0x9d, 0xe7, 0x18, 0xa0, 0xc4, 0xcd, 0x29, 0xdb, 0x83, 0x6e, 0x2a,
	0x62, 0x0e, 0xfd, 0x1e, 0x3e, 0x4e, 0x87, 0x61, 0x1b, 0x3d, 0x11, 0x8f, 0xd2, 0xc3, 0xf7, 0x60,
	0x2b, 0xfd, 0x16, 0x5e, 0x81, 0x20, 0xdb, 0xb1, 0x3e, 0x94, 0x60, 0x6f, 0xf9, 0xbc, 0x81, 0xf0,
	0x2e, 0x74, 0xb2, 0x8f, 0xec, 0x1c, 0xe4, 0xed, 0x94, 0x49, 0x03, 0xdb, 0xba, 0x61, 0xb9, 0x7c,
	0xdd, 0xb0, 0xfc, 0x6b, 0xd8, 0xf6, 0x62, 0x54, 0xd1, 0xde, 0x38, 0x60, 0x77, 0x8d, 0x80, 0xa1,
	0xbf, 0xb8, 0x0f, 0xed, 0xfc, 0xaf, 0x21, 0x6c, 0x0b, 0xaa, 0xdf, 0x9d, 0xbf, 0x79, 0xdd, 0xfb,
	0x88, 0x75, 0xa0, 0x79, 0x66, 0xbf, 0x79, 0xfb, 0xe6, 0xe8, 0xdd, 0xb7, 0x87, 0xbd, 0xd2, 0x93,
	0xbf, 0x97, 0x60, 0x2b, 0x75, 0x88, 0xdd, 0x85, 0x2a, 0xfd, 0xba, 0xd1, 0xe6, 0xb9, 0x1f, 0x10,
	0x06, 0x1d, 0x5e, 0xf8, 0xe9, 0xe3, 0x11, 0x54, 0xd5, 0xdc, 0xcd, 0x76, 0xf9, 0x9a, 0x5f, 0x15,
	0x06, 0x1d, 0x9e, 0x1f, 0xca, 0xd9, 0x7d, 0xa8, 0xd2, 0x4f, 0x19, 0xeb, 0x85, 0x9b, 0x3c, 0x13,
	0xfc, 0x12, 0xe0, 0x5c, 0xba, 0xd2, 0xf7, 0x7e, 0x96, 0xf8, 0x93, 0xff, 0x54, 0xa1, 0xf2, 0xf4,
	0xec, 0x94, 0xed, 0x43, 0xe5, 0x05, 0x4a, 0xd6, 0xe2, 0x8b, 0x66, 0x3e, 0x68, 0xf3, 0x7c, 0xe7,
	0xde, 0x87, 0xca, 0x89, 0x9b, 0xb0, 0x16, 0x5f, 0xf4, 0xb6, 0x41, 0x9b, 0xe7, 0x1b, 0xd9, 0xe7,
	0x50, 0xa3, 0x9e, 0xc8, 0x3a, 0x3c, 0xdf, 0xa0, 0x07, 0x5d, 0x5e, 0xec, 0xa8, 0x4f, 0xa1, 0x5b,
	0x2c, 0x3b, 0xb6, 0xc7, 0xd7, 0x96, 0xf4, 0xe0, 0x26, 0xdf, 0xd0, 0xd1, 0x1e, 0x16, 0xbc, 0x6c,
	0xf3, 0x22, 0x72, 0x85, 0x56, 0xf2, 0x2b, 0x68, 0x98, 0x22, 0x65, 0xdb, 0xbc, 0x58, 0xd4, 0x83,
	0x1e, 0x5f, 0xae, 0xdf, 0xbb, 0x50, 0x55, 0x05, 0xc6, 0xda, 0x3c, 0x57, 0xa2, 0x83, 0x0e, 0xcf,
	0x57, 0x1d, 0xfb, 0x1a, 0xb6, 0x5f, 0xa0, 0x2c, 0xcc, 0xb4, 0xbb, 0x7c, 0xcd, 0x03, 0x36, 0x28,
	0x8e, 0xcc, 0x0a, 0xc2, 0x73, 0x02, 0xf9, 0x3c, 0x0f, 0x72, 0xae, 0x14, 0xd9, 0x43, 0xa8, 0xeb,
	0x3a, 0x63, 0x5d, 0x5e, 0xa8, 0xc9, 0xc1, 0x36, 0x2f, 0x16, 0xa0, 0xb2, 0xf4, 0x7a, 0xe7, 0xbf,
	0x83, 0x9d, 0x95, 0x26, 0xc7, 0x6e, 0xf1, 0x4d, 0x3d, 0x74, 0x30, 0xe0, 0x1b, 0x7b, 0xa2, 0x0a,
	0x5b, 0xb1, 0x62, 0xd9, 0x1e, 0x5f, 0xdb, 0x02, 0x06, 0x37, 0xf9, 0xfa, 0xd2, 0x3e, 0xda, 0xff,
	0xb1, 0x7c, 0xfb, 0xa5, 0x10, 0x21, 0x7f, 0x16, 0xf8, 0x18, 0x49, 0x7e, 0x1a, 0x49, 0x8c, 0x23,
	0x37, 0xe0, 0x67, 0xb1, 0x90, 0x62, 0x38, 0xbb, 0x18, 0xd6, 0xe9, 0x57, 0xd5, 0xc3, 0xff, 0x06,
	0x00, 0x00, 0xff, 0xff, 0xae, 0x29, 0x0e, 0x22, 0xee, 0x15, 0x00, 0x00,
}
