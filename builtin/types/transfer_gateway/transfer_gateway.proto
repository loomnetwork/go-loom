syntax = "proto3";

import "github.com/loomnetwork/go-loom/types/types.proto";

enum TransferGatewayTokenKind {
    ETH = 0;
    ERC20 = 1;
    ERC721 = 2;
}

message TransferGatewayState {
    Address owner = 1;
    // Last Mainnet block processed by the Transfer Gateway contract
    uint64 last_mainnet_block_num = 2;
    // Token owners that have initiated (but have not as yet completed) a withdrawal to Mainnet.
    repeated Address token_withdrawers = 3;
}

message TransferGatewayOracleState {
    // DAppChain address of the Oracle
    Address address = 1;
}

message TransferGatewayWithdrawalReceipt {
    // Mainnet address of token owner
    Address token_owner = 1;
    // Mainnet address of token contract
    Address token_contract = 2;
    TransferGatewayTokenKind token_kind = 3;
    // // ERC721 token ID, or amount of ERC20/ETH
    BigUInt value = 4;
    uint64 withdrawal_nonce = 5;
    // Signature generated by the Oracle that confirmed the withdrawal
    bytes oracle_signature = 6;
}

message TransferGatewayPendingWithdrawalSummary {
    // DAppChain address of token owner
    Address token_owner = 1;
    // Hash of the unsigned withdrawal receipt
    bytes hash = 2;
}

message TransferGatewayAccount {
    Address owner = 1;
    uint64 withdrawal_nonce = 2;
    TransferGatewayWithdrawalReceipt withdrawal_receipt = 3;
}

// Token Deposit (ETH/ERC20/ERC721) made into the Mainnet Gateway
message TransferGatewayTokenDeposited {
    // Mainnet address of token owner
    Address token_owner = 1;
    // Mainnet address of token contract, blank if ETH was deposited
    Address token_contract = 2;
    TransferGatewayTokenKind token_kind = 3;
    // ERC721 token ID, or amount of ERC20/ETH
    BigUInt value = 4;
}


// Withdrawal from Mainnet Transfer Gateway
message TransferGatewayTokenWithdrawn {
    // Mainnet address of token owner
    Address token_owner = 1;
    // Mainnet address of token contract, blank if ETH was withdrawn
    Address token_contract = 2;
    TransferGatewayTokenKind token_kind = 3;
    // ERC721 token ID, or amount of ERC20/ETH
    BigUInt value = 4;
}

message TransferGatewayMainnetEvent {
    uint64 eth_block = 1;
    oneof payload {
        TransferGatewayTokenDeposited deposit = 2;
        TransferGatewayTokenWithdrawn withdrawal = 3;
    }
}

// Events emitted by the contract

// Emitted when a withdrawal to the Mainnet Gateway has been signed.
// This event contains all the required data to complete a toke withdrawal via the Mainnet Gateway.
message TransferGatewayTokenWithdrawalSigned {
    // Mainnet address of token owner
    Address token_owner = 1;
    // Mainnet address of token contract, blank if ETH
    Address token_contract = 2;
    TransferGatewayTokenKind token_kind = 3;
    // ERC721 token ID, or amount of ERC20/ETH
    BigUInt value = 4;
    // Oracle signature
    bytes sig = 5;
}

// Genesis

message TransferGatewayInitRequest {
    // Only the owner will be allowed to add/remove oracles
    Address owner = 1;
    // List of oracles that the Gateway should accept data from
    repeated Address oracles = 2;
    // Initial value for TransferGatewayState.last_mainnet_block_num,
    // Oracles will start looking for relevant Mainnet events from this block onwards.
    // Should be set to the Mainnet block number that immediately preceeded the block containing
    // the tx that deployed the Mainnet Gateway contract.
    uint64 first_mainnet_block_num = 3;
}

// Request & Response

message TransferGatewayAddOracleRequest {
    Address oracle = 1;
}

message TransferGatewayRemoveOracleRequest {
    Address oracle = 1;
}

message TransferGatewayGetOraclesRequest {
}

message TransferGatewayGetOraclesResponse {
    repeated TransferGatewayOracleState oracles = 1;
}

// Batch of events from the Gateway on Ethereum mainnet
message TransferGatewayProcessEventBatchRequest {
    repeated TransferGatewayMainnetEvent events = 1;
}

message TransferGatewayStateRequest {
}

message TransferGatewayStateResponse {
    TransferGatewayState state = 1;
}

message TransferGatewayWithdrawERC721Request {
    // ID of ERC721 token
    BigUInt token_id = 1;
    // DAppChain address of ERC721 contract token belongs to
    Address token_contract = 2;
    // DAppChain address of the current owner of the token
    //Address token_owner = 3;
}

message TransferGatewayWithdrawalReceiptRequest {
    Address owner = 1;
}

message TransferGatewayWithdrawalReceiptResponse {
    TransferGatewayWithdrawalReceipt receipt = 1;
}

message TransferGatewayConfirmWithdrawalReceiptRequest {
    // DAppChain address of the entity attempting to make the withdrawal
    Address token_owner = 1;
    // 66-byte hash of the withdrawal hash
    bytes oracle_signature = 2;
    // 32-byte hash of the withdrawal details
    bytes withdrawal_hash = 3; // TODO: figure out if there's any point passing this around
}

message TransferGatewayPendingWithdrawalsRequest {
}

message TransferGatewayPendingWithdrawalsResponse {
    repeated TransferGatewayPendingWithdrawalSummary withdrawals = 1;
}