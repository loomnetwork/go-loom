syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/loomnetwork/go-loom/types/types.proto";

enum TransferGatewayTokenKind {
    ETH = 0;
    ERC20 = 1;
    ERC721 = 2;
    ERC721X = 3;
    LOOMCOIN = 4;
    TRX = 5;
    TRC20 = 6;
    BNBLoomToken = 7;
    BEP2 = 8;
}

enum TransferGatewayTxStatus {
    PENDING = 0;
    PROCESSED = 1;
    CONFIRMED = 2;
    REJECTED = 3;
}

message TransferGatewayState {
    Address owner = 1;
    // Last Mainnet block processed by the Transfer Gateway contract
    uint64 last_mainnet_block_num = 2;
    // ID that should be used for the next pending contract mapping
    uint64 next_contract_mapping_id = 3 [(gogoproto.customname)="NextContractMappingID"];
    // Token owners that have initiated (but have not as yet completed) a withdrawal to Mainnet.
    repeated Address token_withdrawers = 4;
    // Binance Dex transfer fee. This will be used for binance gateway
    BigUInt transfer_fee = 5;
    // Mainnet Gateway address
    Address mainnet_gateway_address = 6;
    // Mainnet Hot Wallet address
    Address mainnet_hot_wallet_address = 7;
}

message TransferGatewayOracleState {
    // DAppChain address of the Oracle
    Address address = 1;
}

message TransferGatewayWithdrawalReceipt {
    // Mainnet address of token owner
    Address token_owner = 1;
    // Mainnet address of token contract
    Address token_contract = 2;
    TransferGatewayTokenKind token_kind = 3;
    // ERC721/X token ID
    BigUInt token_id = 4 [(gogoproto.customname)="TokenID"];
    // ERC721X/ERC20/ETH amount
    BigUInt token_amount = 5;
    uint64 withdrawal_nonce = 6;
    // Signature generated by the Oracle that confirmed the withdrawal
    bytes oracle_signature = 7;
    // Token withdrawer for withdrawal receipt
    Address token_withdrawer = 8;
    // Mainnet tx hash
    bytes tx_hash = 9;
    // Mainnet tx status
    TransferGatewayTxStatus tx_status = 10;
}

message TransferGatewayPendingWithdrawalSummary {
    // DAppChain address of token owner
    Address token_owner = 1;
    // Hash of the unsigned withdrawal receipt
    bytes hash = 2;
    // Intended to be LOOM Amount for Binance dex
    BigUInt token_amount = 3;
    // Token withdrawer for withdrawal receipt
    Address token_withdrawer = 4;
    // Mainnet tx hash
    bytes tx_hash = 5;
    // Mainnet tx status
    TransferGatewayTxStatus tx_status = 6;
    // Mainnet address of token contract
    Address token_contract = 7;
}

message TransferGatewayLocalAccount {
    Address owner = 1;
    uint64 withdrawal_nonce = 2;
    TransferGatewayWithdrawalReceipt withdrawal_receipt = 3;
}

message TransferGatewayForeignAccount {
    // Foreign address of the foreign account
    Address owner = 1;
    // Nonce that should be used for the next withdrawal to this foreign account
    uint64 withdrawal_nonce = 2;
    // Local address of the account being withdrawn from (if any).
    // This will only be set when there's a withdrawal to the Ethereum Gateway in progress.
    Address current_withdrawer = 3;
}

message TransferGatewayTokenAmount {
    BigUInt token_id = 1 [(gogoproto.customname)="TokenID"];
    BigUInt token_amount = 2;
}

// Stores all unclaimed tokens of a depositor for a single contract.
message TransferGatewayUnclaimedToken {
    // Foreign address of token contract
    Address token_contract = 1;
    TransferGatewayTokenKind token_kind = 2;
    // For ERC721 this is a list of token IDs (amount is omitted because it should always be 1).
    // For ERC721X this is a list of token IDs with the corresponding amount of each token.
    // For ERC20/ETH this list will contain a single value containing the total unclaimed ERC20/ETH amount.
    repeated TransferGatewayTokenAmount amounts = 3;
}

// Token Deposit (ETH/ERC20/ERC721/X) made into the Mainnet Gateway
message TransferGatewayTokenDeposited {
    // Mainnet address of token owner
    Address token_owner = 1;
    // Mainnet address of token contract, blank if ETH was deposited
    Address token_contract = 2;
    TransferGatewayTokenKind token_kind = 3;
    // ERC721/X token ID
    BigUInt token_id = 4 [(gogoproto.customname)="TokenID"];
    // ERC721X/ERC20/ETH amount
    BigUInt token_amount = 5;
    // Mainnet tx hash
    bytes tx_hash = 6;
}


// Withdrawal from Mainnet Transfer Gateway
message TransferGatewayTokenWithdrawn {
    // Mainnet address of token owner
    Address token_owner = 1;
    // Mainnet address of token contract, blank if ETH was withdrawn
    Address token_contract = 2;
    TransferGatewayTokenKind token_kind = 3;
    // ERC721/X token ID
    BigUInt token_id = 4 [(gogoproto.customname)="TokenID"];
    // ERC721X/ERC20/ETH amount
    BigUInt token_amount = 5;
    // Mainnet tx hash
    bytes tx_hash = 6;
}

message TransferGatewayMainnetEvent {
    uint64 eth_block = 1;
    oneof payload {
        TransferGatewayTokenDeposited deposit = 2;
        TransferGatewayTokenWithdrawn withdrawal = 3;
    }
}

message TransferGatewayPendingContractMapping {
    uint64 id = 1 [(gogoproto.customname)="ID"];
    // Address on foreign blockchain
    Address foreign_contract = 2;
    // Corresponding address on local blockchain
    Address local_contract = 3;
    // Foreign address of the creator of the foreign contract
    Address foreign_contract_creator = 4;
    // Hash of the transaction which created the foreign contract
    bytes foreign_contract_tx_hash = 5;
}

message TransferGatewayContractAddressMapping {
    // Address on a blockchain
    Address from = 1;
    // Corresponding address on another blockchain
    Address to = 2;
}

message TransferGatewayUnverifiedContractCreator {
    uint64 contract_mapping_id = 1 [(gogoproto.customname)="ContractMappingID"];
    // Hash of tx that created a contract, an Oracle will use this to lookup the creator & contract
    bytes contract_tx_hash = 2;
    // contract address if contract tx hash is not available for some chains
    Address contract_address = 3;
}

message TransferGatewayVerifiedContractCreator {
    uint64 contract_mapping_id = 1 [(gogoproto.customname)="ContractMappingID"];
    Address creator = 2;
    Address contract = 3;
}

// Events emitted by the contract

message TransferGatewayContractMappingConfirmed {
    // Address of a contract on a foreign blockchain
    Address foreign_contract = 1;
    // Address of corresponding contract on the local blockchain
    Address local_contract = 2;
}

message TransferGatewayContractMappingRejected {
  // Address of corresponding contract on the local blockchain
  Address local_contract = 1;
  // Address of expected contract on a foreign blockchain
  Address expected_foreign_contract = 2;
  // Address of expected contract creator on a foreign blockchain
  Address expected_creator = 3;
  // Address of actual contract on a foreign blockchain
  Address actual_foreign_contract = 4;
  // Address of actual contract creator on a foreign blockchain
  Address actual_creator = 5;
  string error_message = 6;
}

// Emitted when a withdrawal to the Mainnet Gateway has been signed.
// This event contains all the required data to complete a toke withdrawal via the Mainnet Gateway.
message TransferGatewayTokenWithdrawalSigned {
    // Mainnet address of token owner
    Address token_owner = 1;
    // Mainnet address of token contract, blank if ETH
    Address token_contract = 2;
    TransferGatewayTokenKind token_kind = 3;
    // ERC721/X token ID
    BigUInt token_id = 4 [(gogoproto.customname)="TokenID"];
    // ERC721X/ERC20/ETH amount
    BigUInt token_amount = 5;
    // Oracle signature
    bytes sig = 6;
}

// Genesis

message TransferGatewayInitRequest {
    // Only the owner will be allowed to add/remove oracles
    Address owner = 1;
    // List of oracles that the Gateway should accept data from
    repeated Address oracles = 2;
    // Initial value for TransferGatewayState.last_mainnet_block_num,
    // Oracles will start looking for relevant Mainnet events from this block onwards.
    // Should be set to the Mainnet block number that immediately preceeded the block containing
    // the tx that deployed the Mainnet Gateway contract.
    uint64 first_mainnet_block_num = 3;
}

// Request & Response

// Oracle Management

message TransferGatewayAddOracleRequest {
    Address oracle = 1;
}

message TransferGatewayRemoveOracleRequest {
    Address oracle = 1;
}

message TransferGatewayGetOraclesRequest {
}

message TransferGatewayGetOraclesResponse {
    repeated TransferGatewayOracleState oracles = 1;
}

// Contract Mapping

message TransferGatewayAddContractMappingRequest {
    // Address on foreign blockchain
    Address foreign_contract = 1;
    // Corresponding address on local blockchain
    Address local_contract = 2;
    // Signature of the creator of the foreign contract
    bytes foreign_contract_creator_sig = 3;
    // Hash of the transaction which created the foreign contract
    bytes foreign_contract_tx_hash = 4;
}

message TransferGatewayUnverifiedContractCreatorsRequest {
}

message TransferGatewayUnverifiedContractCreatorsResponse {
    repeated TransferGatewayUnverifiedContractCreator creators = 1;
}

message TransferGatewayVerifyContractCreatorsRequest {
    repeated TransferGatewayVerifiedContractCreator creators = 1;
    Address mainnet_gateway_address = 2;
}

// Batch of events from the Gateway on Ethereum mainnet
message TransferGatewayProcessEventBatchRequest {
    repeated TransferGatewayMainnetEvent events = 1;
    Address mainnet_gateway_address = 2;
    Address mainnet_hot_wallet_address = 3;
}

message TransferGatewayStateRequest {
}

message TransferGatewayStateResponse {
    TransferGatewayState state = 1;
}

message TransferGatewayUpdateMainnetGatewayRequest {
    Address mainnet_gateway_address = 1;
}

// Recovery

// Transfer unclaimed tokens to the sender, or to the specified depositors
message TransferGatewayReclaimDepositorTokensRequest {
    // Foreign address of depositors
    repeated Address depositors = 1;
}

// Transfer any unclaimed tokens originating from a specific contract to their depositors
message TransferGatewayReclaimContractTokensRequest {
    // Foreign address of token contract
    Address token_contract = 1;
}

// Withdrawal Management

message TransferGatewayWithdrawTokenRequest {
    // ERC721/X/ERC20 contract DAppChain address
    Address token_contract = 1;
    TransferGatewayTokenKind token_kind = 2;
    // ERC721/X token ID
    BigUInt token_id = 3 [(gogoproto.customname)="TokenID"];
    // ERC721X/ERC20 amount
    BigUInt token_amount = 4;
    // Ethereum address of the account that should receive the token.
    // If this field is omitted the Gateway will attempt to obtain the recipient address from a
    // previously created mapping between the sender's DAppChain address and their Ethereum address,
    // if no such mapping exists the request will error out.
    Address recipient = 5;
}

message TransferGatewayWithdrawLoomCoinRequest {
    // Amount of Loomcoin to withdraw
    BigUInt amount = 1;
    // Address of Mainnet Loomcoin contract
    Address token_contract = 2;
    // Ethereum address of the account that should receive the Loomcoin.
    // If this field is omitted the Gateway will attempt to obtain the recipient address from a
    // previously created mapping between the sender's DAppChain address and their Ethereum address,
    // if no such mapping exists the request will error out.
    Address recipient = 3;
}

message TransferGatewayWithdrawETHRequest {
    // Amount of ETH to withdraw
    BigUInt amount = 1;
    // Address of Mainnet Gateway contract -- TODO: This is redundant and
    // should be removed in a subsequent PR.
    Address mainnet_gateway = 2;
    // Ethereum address of the account that should receive the ETH.
    // If this field is omitted the Gateway will attempt to obtain the recipient address from a
    // previously created mapping between the sender's DAppChain address and their Ethereum address,
    // if no such mapping exists the request will error out.
    Address recipient = 3;
}

message TransferGatewayWithdrawalReceiptRequest {
    Address owner = 1;
}

message TransferGatewayWithdrawalReceiptResponse {
    TransferGatewayWithdrawalReceipt receipt = 1;
}

message TransferGatewayConfirmWithdrawalReceiptRequest {
    // DAppChain address of the entity attempting to make the withdrawal
    Address token_owner = 1;
    // 66-byte hash of the withdrawal hash
    bytes oracle_signature = 2;
    // 32-byte hash of the withdrawal details
    bytes withdrawal_hash = 3; // TODO: figure out if there's any point passing this around
    // withdrawal status
    TransferGatewayTxStatus withdrawal_status = 4;
    // Mainnet Gateway/Wallet address
    Address mainnet_gateway_address = 5;
}

message TransferGatewayConfirmWithdrawalReceiptRequestV2 {
    // DAppChain address of the entity attempting to make the withdrawal
    Address token_owner = 1;
    // serialized array of 65-byte signatures on the withdrawal hash
    bytes oracle_signature = 2;
    // Address of mainnet gateway contract
    Address mainnet_gateway = 3;
}

message TransferGatewayPendingWithdrawalsRequest {
    // Address of Mainnet Gateway contract
    Address mainnet_gateway = 1;
    // Status of withdrawal transaction
    TransferGatewayTxStatus tx_status = 2;
}

message TransferGatewayPendingWithdrawalsResponse {
    repeated TransferGatewayPendingWithdrawalSummary withdrawals = 1;
}

message TransferGatewayResetMainnetBlockRequest {
    uint64 last_mainnet_block_num = 1;
}

message TransferGatewayProcessMainnetEventError {
    uint64 eth_block = 1;
    TransferGatewayMainnetEvent event = 2;
    string error_message = 3;
}

message TransferGatewayReclaimError {
    Address owner = 1;
    string error_message = 2;
}

message TransferGatewayWithdrawETHError {
    TransferGatewayWithdrawETHRequest withdraw_eth_request = 1;
    string error_message = 2;
}

message TransferGatewayWithdrawLoomCoinError {
    TransferGatewayWithdrawLoomCoinRequest withdraw_loom_coin_request = 1;
    string error_message = 2;
}

message TransferGatewayWithdrawTokenError {
    TransferGatewayWithdrawTokenRequest withdraw_token_request = 1;
    string error_message = 2;
}

message TransferGatewayGetUnclaimedTokensRequest {
    Address owner = 1;
}

message TransferGatewayGetUnclaimedTokensResponse {
    repeated TransferGatewayUnclaimedToken unclaimed_tokens = 1;
}

message TransferGatewayMainnetEventTxHashInfo {
    TransferGatewayTokenKind token_kind = 1;
}

enum ValidatorAuthStrategy {
    USE_TRUSTED_VALIDATORS = 0;
    USE_DPOS_VALIDATORS = 1;
}

message TransferGatewayValidatorAuthConfig {
    ValidatorAuthStrategy auth_strategy = 1;
    TransferGatewayTrustedValidators trusted_validators = 2;
}

message TransferGatewayTrustedValidators {
    repeated Address validators = 1;
}

message TransferGatewayTrustedValidatorsRequest {
}

message TransferGatewayTrustedValidatorsResponse {
    TransferGatewayTrustedValidators trusted_validators = 1;
}

message TransferGatewayUpdateTrustedValidatorsRequest {
    TransferGatewayTrustedValidators trusted_validators = 1;
}

message TransferGatewayUpdateValidatorAuthStrategyRequest {
    ValidatorAuthStrategy auth_strategy = 1;
}

message TransferGatewayGetValidatorAuthStrategyRequest {

}

message TransferGatewayGetValidatorAuthStrategyResponse {
    ValidatorAuthStrategy auth_strategy = 1;
}

message TransferGatewayGetUnclaimedContractTokensRequest {
    Address token_address = 1;
}

message TransferGatewayGetUnclaimedContractTokensResponse {
    BigUInt unclaimed_amount = 1;
}

message TransferGatewayUpdateMainnetHotWalletRequest {
    Address mainnet_hot_wallet_address = 1;
}

message TransferGatewayHotWalletTxHash {
    bytes tx_hash = 1;
}

message TransferGatewayHotWalletTxHashes {
    repeated bytes tx_hashes = 1;
}

message TransferGatewayPendingHotWalletDepositTxHashesRequest{
}

message TransferGatewayPendingHotWalletDepositTxHashesResponse {
    repeated bytes tx_hashes = 1;
}

message TransferGatewaySubmitHotWalletDepositTxHashRequest {
    bytes tx_hash = 1;
}

message TransferGatewayClearInvalidHotWalletDepositTxHashRequest {
    repeated bytes tx_hashes = 1;
    Address mainnet_hot_wallet_address = 2;
}

//Request for fetching Contract Mapping for given Address
message TransferGatewayGetContractMappingRequest {
    Address from = 1;
}

message TransferGatewayGetContractMappingResponse {
    Address mapped_address = 1;
    bool is_pending = 2;
    bool found = 3;
}

message TransferGatewayListContractMappingRequest {
}

message TransferGatewayListContractMappingResponse {
    repeated TransferGatewayContractAddressMapping confimed_mappings = 1;
    repeated TransferGatewayPendingContractMapping pending_mappings = 2;
}

message TransferGatewayResubmitWithdrawalRequest {
}

message TransferGatewayResubmitWithdrawalError {
    TransferGatewayWithdrawalReceipt withdrawal_receipt = 1;
    string error_message = 2;
}

message TransferGatewayUpdateBinanceTransferFeeRequest{
    BigUInt transfer_fee = 1;
}

message TransferGatewaySwitchMainnetGatewayRequest {
  Address mainnet_address = 1;
  string gateway_name = 2;
}