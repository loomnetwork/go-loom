syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/loomnetwork/go-loom/types/types.proto";

enum PlasmaCashCoinState {
    DEPOSITED = 0;
    EXITING = 1;
    CHALLENGED = 2;
    EXITED = 3;
}

// Plasma Cash coin holds a single ERC721 token
message PlasmaCashCoin {
    // Unique ID
    uint64 slot = 1;
    PlasmaCashCoinState state = 2;
    // ERC721 token ID
    BigUInt token = 3;
    // ERC721 token contract address
    Address contract = 4;
}

message PlasmaCashAccount {
    Address owner = 1;
    // Plasma coins in this account, identified by their slot number.
    repeated uint64 slots = 3;
}

message PlasmaBlock {
    BigUInt uid = 1;
    repeated PlasmaTx transactions = 2; // List of transactions included in Block
    bytes signature = 3; // Signature on the block’s hash
    bytes merkle_hash = 4; // The block's merkle root from its included transactions
    bytes hash = 5; // The hash of the RLP encoded unsigned block’s bytes.
    bytes proof = 6;
}

message PlasmaTx {
    uint64 slot = 1; // The slot of the UTXO - Currently uint64, subject to change.
    BigUInt previous_block = 2 [(gogoproto.customname)="PreviousBlock"]; //Each time a transaction is created, it MUST refer to a previous block which also included that transaction. A transaction is considered a “deposit transaction”, if it’s the first UTXO after a user deposits their coin in the Plasma Chain. This transaction mints coins from nowhere in the Plasma Chain and as a result its previous block is 0.
    BigUInt denomination = 3; // How many coins are included in that UTXO. Currently this is always 1 since we’re using ERC721 tokens which are unique, however in future iterations this can be any number.
    Address new_owner = 4 [(gogoproto.customname)="NewOwner"]; //  The new owner of the transaction.
    bytes signature = 5; // Signature on the transaction's hash
    bytes hash = 6;   // The hash of the RLP encoded unsigned transaction’s bytes. If the transaction is a deposit transaction (its prevblock is 0), its hash is the hash of its uid
    bytes merkle_hash = 7; // The hash of the RLP encoded signed transaction’s bytes
    Address sender = 8; // The transaction’s sender, derived from the hash and the signature
    bytes proof = 9; // Proof after its inserted into the block
}


message PlasmaBookKeeping {
    BigUInt current_height = 1  [(gogoproto.customname)="CurrentHeight"]; // Height of all the plasma blocks
}

message GetCurrentBlockRequest {
}

message GetCurrentBlockResponse {
    BigUInt block_height = 1 [(gogoproto.customname)="BlockHeight"];
}


message GetBlockRequest {
    BigUInt block_height = 1 [(gogoproto.customname)="BlockHeight"];
}

message GetBlockResponse {
    PlasmaBlock block = 1;
}

// This only originates from the validator
message SubmitBlockToMainnetRequest {
}

message SubmitBlockToMainnetResponse {
    bytes merkle_hash = 1; // Merkle root of Plasma block to be submitted to mainnet
}

message PlasmaTxRequest {
    PlasmaTx plasmatx = 1;
}

message PlasmaTxResponse {
}

message GetPlasmaTxRequest {
    uint64 slot = 1; // The slot of the UTXO - Currently uint64, subject to change.
    BigUInt block_height = 2 [(gogoproto.customname)="BlockHeight"];
}

message GetPlasmaTxResponse {
    PlasmaTx plasmatx = 1;
}

message GetUserSlotsRequest {
    Address from = 1;
}

message GetUserSlotsResponse {
    repeated uint64 slots = 1;
}

// This only originates from the validator
message DepositRequest {
    uint64 slot = 1; // The slot of the UTXO - Currently uint64, subject to change.
    BigUInt deposit_block = 2;
    // For ERC20 this is the number of coins deposited, for ERC721 this is a token ID.
    BigUInt denomination = 3;
    // Entity that made the deposit
    Address from = 4;
    // Contract from which the coins originated (i.e. the currency of the coins)
    Address contract = 5;
}

message DepositResponse {
}

message PlasmaCashExitCoinRequest {
    Address owner = 1;
    uint64 slot = 2;
}

message PlasmaCashWithdrawCoinRequest {
    Address owner = 1;
    uint64 slot = 2;
}

message Pending {
   repeated PlasmaTx transactions  = 1;
}

// Initialization of state from Genesis.json
message PlasmaCashParams {
    uint64 block_interval = 1;
}


message PlasmaCashInitRequest {
    PlasmaCashParams params = 1;
    Address oracle = 2;
}

// Static Calls

message PlasmaCashBalanceOfRequest {
    Address owner = 1;
    Address contract = 2;
}

message PlasmaCashBalanceOfResponse {
    repeated PlasmaCashCoin coins = 1;
}

message PlasmaCashUpdateOracleRequest {
    Address new_oracle = 1;
}

// Event structures

message PlasmaDepositEvent {
    uint64 slot = 1; // The slot of the UTXO - Currently uint64, subject to change.
    BigUInt deposit_block = 2;
    // For ERC20 this is the number of coins deposited, for ERC721 this is a token ID.
    BigUInt denomination = 3;
    // Entity that made the deposit
    Address from = 4;
    // Contract from which the coins originated (i.e. the currency of the coins)
    Address contract = 5;
}

message PlasmaCashStartedExitEvent {
    Address owner = 1;
    uint64 slot = 2;
}

message PlasmaCashFinalizedExitEvent {
    Address owner = 1;
    uint64 slot = 2;
}

message PlasmaCashWithdrewEvent {
    Address owner = 1;
    uint32 mode = 2;
    Address contract = 3;
    BigUInt uid = 4;
    BigUInt denomination = 5;
    uint64 slot = 6;
}

// Events emitted by the contract

message PlasmaCashTransferConfirmed {
    Address from = 1;
    Address to = 2;
    uint64 slot = 3;
}
